datos_validacion_limpio$log_above = NULL
datos_validacion_numeric <- datos_validacion_limpio %>% select_if(is.numeric)
datos_train_limpio %>%
group_by(price_categ1) %>%
summarise(Count = n())%>%
mutate(percent = prop.table(Count)*100)%>%
ggplot(aes(reorder(price_categ1, - percent), percent), fill = price_categ1) +
geom_col(fill = c("salmon", "cyan3"), size = 0.5) +
xlab("Precio de las casas") +
ylab("Porcentaje") +
ggtitle("Porcentaje de casas por precio") +
theme(plot.title = element_text(hjust = 0.5))
p1<-ggplot(data = datos_train_limpio)+
geom_bar(aes(x=bedrooms,fill=price_categ1,bins=30, position = "identity"))
p2<-ggplot(data=datos_train_limpio)+
geom_bar(aes(x=bathrooms_group,fill = price_categ1))
p3<-ggplot(data=datos_train_limpio)+
geom_density(aes(x=log_sqft_living, fill=price_categ1))
p4<-ggplot(data=datos_train_limpio)+
geom_density(aes(x=log_lot, fill=price_categ1))+
facet_grid(price_categ1~., scales = 'free')
grid.arrange(p1, p2, p3, p4, nrow = 2)
p5<-ggplot(data = datos_train_limpio) + geom_bar(aes(x=waterfront,fill=price_categ1, stat="count"))
p6<-ggplot(data = datos_train_limpio) + geom_bar(aes(x=view,fill=price_categ1, stat="count"))
p7<-ggplot(data = datos_train_limpio) + geom_bar(aes(x=condition,fill=price_categ1, stat="count"))
p8<-ggplot(data = datos_train_limpio) + geom_bar(aes(x=grade_categ,fill=price_categ1, stat="count"))
p9<-ggplot(data = datos_train_limpio) + geom_bar(aes(x=yr_renovated_catg,fill=price_categ1, stat="count"))
p10<-ggplot(data = datos_train_limpio) + geom_bar(aes(x=zona,fill=price_categ1,bins=30, position = "identity"))
grid.arrange(p5,p6,p7,p8,p9,p10, nrow = 3)
datospca<-datos_train_numeric
pca<-prcomp(datospca,scale=T)
plot(pca, main = 'Análisis de componentes principales', xlab= 'Componente')
summary(pca)
pca$rotation
biplot(x = pca, scale = 0, cex = 0.6, col = c("blue4", "brown3"))
datos_scale<- as.data.frame(scale(datos_train_numeric))
matriz_dist=dist(datos_scale)
set.seed(1234)
modelo_hc1= hclust(matriz_dist, method = "average")
plot(modelo_hc1, sub='')
rect.hclust(modelo_hc1, k=2, border="red")
set.seed(1234)
modelo_hc2= hclust(matriz_dist, method = "average")
plot(modelo_hc2, sub='')
rect.hclust(modelo_hc2, k=10, border="red")
grupos2=cutree(modelo_hc1,k=2)
table(datos_train_limpio$price_categ1, grupos2)
grupos10=cutree(modelo_hc2,k=10)
table(datos_train_limpio$price_categ1, grupos10)
colores1= c("red","blue")
colores11 = colores1[datos_train_limpio$price_categ1]
plot(prcomp(datos_train_numeric, scale = T)$x[,1:2], type="n",main= "Dos categorías")
text(prcomp(datos_train_numeric, scale = T)$x[,1:2], as.character(datos_train_limpio$price_categ1), col=colores11)
set.seed(1234)
model_km <- kmeans(matriz_dist, centers=2)
colores1= c("red","blue")
colores11 = colores1[datos_train_limpio$price_categ1]
plot(prcomp(datos_train_numeric, scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_numeric, scale = T)$x[,1:2], as.character(model_km$cluster), col=colores11)
set.seed(1234)
wcss <- vector()
for(i in 1:20){
wcss[i] <- sum(kmeans(datos_scale, i)$withinss)
}
ggplot() + geom_point(aes(x = 1:20, y = wcss), color = 'blue') +
geom_line(aes(x = 1:20, y = wcss), color = 'blue') +
ggtitle("Método del Codo") +
xlab('Cantidad de Centroides k') +
ylab('WCSS')
load("model_km10.RData")
table(model_km$cluster, datos_train_limpio$price_categ1) #asignación de observación a los cluster
table(model_km10$cluster, datos_train_limpio$price_categ1)
aggregate(datos_train_numeric[,-c(4,5)],by=list(model_km$cluster), mean)
aggregate(datos_train_numeric[,-c(4,5)],by=list(model_km10$cluster), mean)
par(mfrow=c(1,2))
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km$cluster, xlab="latitud", ylab="longitud",  main='Dos clústers')
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km10$cluster, xlab="latitud", ylab="longitud", main="Diez clústers")
clusterkmeans=as.data.frame(model_km$cluster)
clusterkmeans$indice= as.integer(rownames(clusterkmeans))
colnames(clusterkmeans)[1]= "categoria_price_km"
clustering1= clusterkmeans[order(clusterkmeans$indice),]
center_lon = median(datos_train_limpio$long,na.rm = TRUE)
center_lat = median(datos_train_limpio$lat,na.rm = TRUE)
factpal1 <- colorFactor(c("green","red"),
clustering1$categoria_price_km )
leaflet(datos_train_limpio) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~long, lat = ~lat,
color = ~factpal1(clustering1$categoria_price_km))  %>%
# controls
setView(lng=center_lon, lat=center_lat,zoom = 9) %>%
addLegend("bottomright", pal = factpal1 , values = ~clustering1$categoria_price_km,
title = "Tipos de casas",
opacity = 1)
datoskmedoids1 = datos_train_limpio[,c(1,3,4,10:12)]
model_medoids1 = pam(x = datoskmedoids1, k = 2, keep.diss = TRUE, keep.data = TRUE)
model_medoids1$medoids
datoskmedoids2 = datos_train_limpio[,-14]
model_medoids2 = pam(x = datoskmedoids2, k = 2, keep.diss = TRUE, keep.data = TRUE)
model_medoids2$medoids
clustering = sort(model_medoids1$clustering)
clustering = as.data.frame(model_medoids1$clustering)
clustering$indice= as.integer(rownames(clustering))
colnames(clustering)[1]= "categoria_price"
clustering2 = clustering[order(clustering$indice),]
center_lon = median(datoskmedoids1$long,na.rm = TRUE)
center_lat = median(datoskmedoids1$lat,na.rm = TRUE)
factpal2 <- colorFactor(c("green","red"),
clustering2$categoria_price )
leaflet(datoskmedoids1) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~long, lat = ~lat,
color = ~factpal2(clustering2$categoria_price))  %>%
# controls
setView(lng=center_lon, lat=center_lat,zoom = 9) %>%
addLegend("bottomright", pal = factpal2 , values = ~clustering2$categoria_price,
title = "Tipos de casas",
opacity = 1)
datos_train_rl <- datos_train_limpio[,-c(8,9)]
datos_train_rl$price_categ1<- recode(datos_train_rl$price_categ1, "'B1'=0; 'C1'=1")
set.seed(1234)
model_glm = glm(price_categ1 ~log_sqft_living+zona, family = binomial, data =datos_train_rl)
summary(model_glm)
predicciones <- ifelse(test = model_glm$fitted.values > 0.5, yes = 1, no = 0)
tabla_glm_train <- table(model_glm$model$price_categ1, predicciones, dnn = c("observaciones", "predicciones"))
tabla_glm_train
#caras
pred_caras_glm_train=tabla_glm_train[2,2]/(tabla_glm_train[2,2]+tabla_glm_train[1,2])
rec_caras_glm_train=tabla_glm_train[2,2]/(tabla_glm_train[2,2]+tabla_glm_train[2,1])
F_caras_reglog=(2*pred_caras_glm_train*rec_caras_glm_train)/(pred_caras_glm_train+rec_caras_glm_train)
cat(c('F1 casas caras: ', F_caras_reglog), '\n')
#baratas
pred_baratas_glm_train=tabla_glm_train[1,1]/(tabla_glm_train[1,1]+tabla_glm_train[2,1])
rec_baratas_glm_train=tabla_glm_train[1,1]/(tabla_glm_train[1,1]+tabla_glm_train[1,2])
F_baratas_reglog=(2*pred_baratas_glm_train*rec_baratas_glm_train)/(pred_baratas_glm_train+rec_baratas_glm_train)
cat(c('F1 casas baratas: ', F_baratas_reglog), '\n')
#F-Medida
F_reglog_train= (F_caras_reglog+F_baratas_reglog)/2
cat(c('F1 global: ', F_reglog_train), '\n')
accuracy_reglog_train = (tabla_glm_train[1,1]+tabla_glm_train[2,2]) / (tabla_glm_train[1,1]+tabla_glm_train[1,2]+tabla_glm_train[2,1]+tabla_glm_train[2,2])
cat(c('Accuracy: ', accuracy_reglog_train), '\n')
predicciones = predict(model_glm, datos_test_limpio[,-15])
predicciones <- ifelse(predicciones > 0.5, yes = 1, no = 0)
tabla_glm_test <- table(datos_test_limpio$price_categ1, predicciones)
tabla_glm_test
#caras
pred_caras_glm_test=tabla_glm_test[2,2]/(tabla_glm_test[2,2]+tabla_glm_test[1,2])
rec_caras_glm_test=tabla_glm_test[2,2]/(tabla_glm_test[2,2]+tabla_glm_test[2,1])
F_caras_reglog=(2*pred_caras_glm_test*rec_caras_glm_test)/(pred_caras_glm_test+rec_caras_glm_test)
cat(c('F1 casas caras: ', F_caras_reglog), '\n')
#baratas
pred_baratas_glm_test=tabla_glm_test[1,1]/(tabla_glm_test[1,1]+tabla_glm_test[2,1])
rec_baratas_glm_test=tabla_glm_test[1,1]/(tabla_glm_test[1,1]+tabla_glm_test[1,2])
F_baratas_reglog=(2*pred_baratas_glm_test*rec_baratas_glm_test)/(pred_baratas_glm_test+rec_baratas_glm_test)
cat(c('F1 casas baratas: ', F_baratas_reglog), '\n')
#F-Medida
F_reglog_test= (F_caras_reglog+F_baratas_reglog)/2
cat(c('F1 global: ', F_reglog_test), '\n')
accuracy_reglog_test = (tabla_glm_test[1,1]+tabla_glm_test[2,2]) / (tabla_glm_test[1,1]+tabla_glm_test[1,2]+tabla_glm_test[2,1]+tabla_glm_test[2,2])
cat(c('Accuracy: ', accuracy_reglog_test), '\n')
set.seed(1234)
model_gam_categ <- gam(price_categ1 ~
s(log_sqft_living, bs = "ps") +
s(lat, bs = "ps") +
s(long, bs = "ps"), data = datos_train_limpio, binomial(link = "logit"))
summary(model_gam_categ)
visreg(model_gam_categ)
predicciones <- predict(model_gam_categ, datos_train_limpio)
predicciones <- ifelse(test = predicciones > 0.5, yes = 1, no = 0)
tabla_gam_train <- table(model_gam_categ$model$price_categ1, predicciones, dnn = c("observaciones", "predicciones"))
tabla_gam_train
#caras
pred_caras_gam_train=tabla_gam_train[2,2]/(tabla_gam_train[2,2]+tabla_gam_train[1,2])
rec_caras_gam_train=tabla_gam_train[2,2]/(tabla_gam_train[2,2]+tabla_gam_train[2,1])
F_caras_gam=(2*pred_caras_gam_train*rec_caras_gam_train)/(pred_caras_gam_train+rec_caras_gam_train)
cat(c('F1 casas caras: ', F_caras_gam), '\n')
#baratas
pred_baratas_gam_train=tabla_gam_train[1,1]/(tabla_gam_train[1,1]+tabla_gam_train[2,1])
rec_baratas_gam_train=tabla_gam_train[1,1]/(tabla_gam_train[1,1]+tabla_gam_train[1,2])
F_baratas_gam=(2*pred_baratas_gam_train*rec_baratas_gam_train)/(pred_baratas_gam_train+rec_baratas_gam_train)
cat(c('F1 casas baratas: ', F_baratas_gam), '\n')
#F-Medida
F_gam_train= (F_caras_gam+F_baratas_gam)/2
cat(c('F1 global: ', F_gam_train), '\n')
accuracy_gam_train = (tabla_gam_train[1,1]+tabla_gam_train[2,2]) / (tabla_gam_train[1,1]+tabla_gam_train[1,2]+tabla_gam_train[2,1]+tabla_gam_train[2,2])
cat(c('Accuracy: ', accuracy_gam_train), '\n')
predicciones = predict(model_gam_categ, datos_test_limpio[,-15])
predicciones <- ifelse(predicciones > 0.5, yes = 1, no = 0)
tabla_gam_test <- table(datos_test_limpio$price_categ1, predicciones, dnn = c("observaciones", "predicciones"))
tabla_gam_test
#caras
pred_caras_gam_test=tabla_gam_test[2,2]/(tabla_gam_test[2,2]+tabla_gam_test[1,2])
rec_caras_gam_test=tabla_gam_test[2,2]/(tabla_gam_test[2,2]+tabla_gam_test[2,1])
F_caras_gam=(2*pred_caras_gam_test*rec_caras_gam_test)/(pred_caras_gam_test+rec_caras_gam_test)
cat(c('F1 casas caras: ', F_caras_gam), '\n')
#baratas
pred_baratas_gam_test=tabla_gam_test[1,1]/(tabla_gam_test[1,1]+tabla_gam_test[2,1])
rec_baratas_gam_test=tabla_gam_test[1,1]/(tabla_gam_test[1,1]+tabla_gam_test[1,2])
F_baratas_gam=(2*pred_baratas_gam_test*rec_baratas_gam_test)/(pred_baratas_gam_test+rec_baratas_gam_test)
cat(c('F1 casas baratas: ', F_baratas_gam), '\n')
#F-Medida
F_gam_test= (F_caras_gam+F_baratas_gam)/2
cat(c('F1 global: ', F_gam_test), '\n')
accuracy_gam_test = (tabla_gam_test[1,1]+tabla_gam_test[2,2]) / (tabla_gam_test[1,1]+tabla_gam_test[1,2]+tabla_gam_test[2,1]+tabla_gam_test[2,2])
cat(c('Accuracy: ', accuracy_gam_test), '\n')
set.seed(1234)
knn_1 <- train.kknn(price_categ1 ~ bedrooms+log_sqft_living+lat+long, data = datos_train_limpio, kmax = 30)
knn_1
set.seed(1234)
knn_2 <- tune.knn(x = scale(datos_train_numeric[,c(1,2,4,5)]),
y = as.factor(datos_train_limpio$price_categ1),
k = 1:30,
tunecontrol = tune.control(sampling = "boot"))
summary(knn_2)
plot(knn_2, main = "Mejor k según tune")
set.seed(1234)
k_maximo=50
rango=1:k_maximo
f1_modelos=c()
for (i in rango){
knn_3=knn.cv(scale(datos_train_numeric[,c(1,2,4,5)]), cl=as.factor(datos_train_limpio$price_categ1),k=i)
tabla=table(datos_train_limpio$price_categ1,knn_3)
# f1 casas caras
pred_means_caras=tabla[2,2]/(tabla[2,2]+tabla[1,2])
rec_means_caras=tabla[2,2]/(tabla[2,2]+tabla[2,1])
f1_caras=(2*pred_means_caras*rec_means_caras)/(pred_means_caras+rec_means_caras)
# f1 casas baratas
pred_means_baratas=tabla[1,1]/(tabla[1,1]+tabla[2,1])
rec_means_baratas=tabla[1,1]/(tabla[1,1]+tabla[1,2])
f1_baratas=(2*pred_means_baratas*rec_means_baratas)/(pred_means_baratas+rec_means_baratas)
f1_total = (f1_baratas + f1_caras)/2
f1_modelos=c(f1_modelos,f1_total)
}
plot(f1_modelos)
cat(c('Valor óptimo de k: ', which.max(f1_modelos)))
model_knn=knn.cv(scale(datos_train_numeric[,c(1,2,4,5)]), cl=as.factor(datos_train_limpio$price_categ1), k=14, prob = TRUE)
center_lon = median(datos_train_limpio$long,na.rm = TRUE)
center_lat = median(datos_train_limpio$lat,na.rm = TRUE)
factpal1 <- colorFactor(c("green","red"),
model_knn)
leaflet(datos_train_limpio) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~long, lat = ~lat,
color = ~factpal1(model_knn))  %>%
# controls
setView(lng=center_lon, lat=center_lat, zoom = 9) %>%
addLegend("bottomright", pal = factpal1 , values = ~model_knn,
title = "Precio (en miles de $)",
opacity = 1)
tabla_knn_train=table(datos_train_limpio$price_categ1, model_knn)
tabla_knn_train
pred_caras_knn_train = tabla_knn_train[2,2]/(tabla_knn_train[2,2]+tabla_knn_train[1,2])
rec_caras_knn_train = tabla_knn_train[2,2]/(tabla_knn_train[2,2]+tabla_knn_train[2,1])
F_caras_knn_train=(2*pred_caras_knn_train*rec_caras_knn_train)/(pred_caras_knn_train+rec_caras_knn_train)
cat(c('F1 caras: ', F_caras_knn_train), '\n')
pred_baratas_knn_train=tabla_knn_train[1,1]/(tabla_knn_train[1,1]+tabla_knn_train[2,1])
rec_baratas_knn_train=tabla_knn_train[1,1]/(tabla_knn_train[1,1]+tabla_knn_train[1,2])
F_baratas_knn_train=(2*pred_baratas_knn_train*rec_baratas_knn_train)/(pred_baratas_knn_train+rec_baratas_knn_train)
cat(c('F1 baratas: ', F_baratas_knn_train), '\n')
F_knn_train= (F_caras_knn_train+F_baratas_knn_train)/2
cat(c('F1 global: ', F_knn_train), '\n')
accuracy_knn_train= (tabla_knn_train[1,1]+tabla_knn_train[2,2]) / (tabla_knn_train[1,1]+tabla_knn_train[1,2]+tabla_knn_train[2,1]+tabla_knn_train[2,2])
cat(c('Accuracy: ', accuracy_knn_train), '\n')
predict_knn_test <- knn(scale(datos_train_numeric), scale(datos_test_numeric), cl=datos_train_limpio$price_categ1, k=14)
tabla_knn_test=table(datos_test_limpio$price_categ1, predict_knn_test)
tabla_knn_test
pred_caras_knn_test=tabla_knn_test[2,2]/(tabla_knn_test[2,2]+tabla_knn_test[1,2])
rec_caras_knn_test=tabla_knn_test[2,2]/(tabla_knn_test[2,2]+tabla_knn_test[2,1])
F_caras_knn_test=(2*pred_caras_knn_test*rec_caras_knn_test)/(pred_caras_knn_test+rec_caras_knn_test)
cat(c('F1 caras: ', F_caras_knn_test), '\n')
pred_baratas_knn_test=tabla_knn_test[1,1]/(tabla_knn_test[1,1]+tabla_knn_test[2,1])
rec_baratas_knn_test=tabla_knn_test[1,1]/(tabla_knn_test[1,1]+tabla_knn_test[1,2])
F_baratas_knn_test=(2*pred_baratas_knn_test*rec_baratas_knn_test)/(pred_baratas_knn_test+rec_baratas_knn_test)
cat(c('F1 baratas: ', F_baratas_knn_test), '\n')
F_knn_test = (F_caras_knn_test+F_baratas_knn_test)/2
cat(c('F1 global: ', F_knn_test), '\n')
accuracy_knn_test= (tabla_knn_test[1,1]+tabla_knn_test[2,2]) / (tabla_knn_test[1,1]+tabla_knn_test[1,2]+tabla_knn_test[2,1]+tabla_knn_test[2,2])
cat(c('Accuracy: ', accuracy_knn_test), '\n')
set.seed(1234)
datos_decision_tree<-datos_train_limpio
datos_decision_tree$log_sqft_categ <- cut(datos_decision_tree$log_sqft_living, breaks = c(0, 3.4, 5), labels = c("P", "G"))
decisiontree_model=rpart(price_categ1~log_sqft_categ+zona+log_lot,
data=datos_decision_tree,
parms=list(split="gini"),
control = rpart.control(cp = 0.005, maxdepth = 4, minbucket = 400))
fancyRpartPlot(decisiontree_model, caption='')
tabla_train_arbol=table(obs = datos_decision_tree$price_categ1, pred = predict(decisiontree_model, type = "class"))
tabla_train_arbol
pred_caras_dt_train = tabla_train_arbol[2,2]/(tabla_train_arbol[2,2]+tabla_train_arbol[1,2])
rec_caras_dt_train = tabla_train_arbol[2,2]/(tabla_train_arbol[2,2]+tabla_train_arbol[2,1])
F_caras_dt_train=(2*pred_caras_dt_train*rec_caras_dt_train)/(pred_caras_dt_train+rec_caras_dt_train)
cat(c('F1 caras: ', F_caras_dt_train), '\n')
pred_baratas_dt_train = tabla_train_arbol[1,1]/(tabla_train_arbol[1,1]+tabla_train_arbol[2,1])
rec_baratas_dt_train = tabla_train_arbol[1,1]/(tabla_train_arbol[1,1]+tabla_train_arbol[1,2])
F_baratas_dt_train=(2*pred_baratas_dt_train*rec_baratas_dt_train)/(pred_baratas_dt_train+rec_baratas_dt_train)
cat(c('F1 baratas: ', F_baratas_dt_train), '\n')
F_dt_train= (F_caras_dt_train+F_baratas_dt_train)/2
cat(c('F1 global: ', F_dt_train), '\n')
accuracy_dt_train = (tabla_train_arbol[1,1]+tabla_train_arbol[2,2]) / (tabla_train_arbol[1,1]+tabla_train_arbol[1,2]+tabla_train_arbol[2,1]+tabla_train_arbol[2,2])
cat(c('Accuracy: ', F_dt_train), '\n')
datos_decision_tree_test <- datos_test_limpio
datos_decision_tree_test$log_sqft_categ <- cut(datos_decision_tree_test$log_sqft_living, breaks = c(0, 3.4, 5), labels = c("P", "G"))
tabla_test_arbol=table(obs = datos_decision_tree_test$price_categ1, pred = predict(decisiontree_model, datos_decision_tree_test, type = "class"))
tabla_test_arbol
pred_caras_dt_test = tabla_test_arbol[2,2]/(tabla_test_arbol[2,2]+tabla_test_arbol[1,2])
rec_caras_dt_test = tabla_test_arbol[2,2]/(tabla_test_arbol[2,2]+tabla_test_arbol[2,1])
F_caras_dt_test=(2*pred_caras_dt_test*rec_caras_dt_test)/(pred_caras_dt_test+rec_caras_dt_test)
cat(c('F1 caras: ', F_caras_dt_test), '\n')
pred_baratas_dt_test = tabla_test_arbol[1,1]/(tabla_test_arbol[1,1]+tabla_test_arbol[2,1])
rec_baratas_dt_test = tabla_test_arbol[1,1]/(tabla_test_arbol[1,1]+tabla_test_arbol[1,2])
F_baratas_dt_test=(2*pred_baratas_dt_test*rec_baratas_dt_test)/(pred_baratas_dt_test+rec_baratas_dt_test)
cat(c('F1 baratas: ', F_baratas_dt_test), '\n')
F_dt_test= (F_caras_dt_test+F_baratas_dt_test)/2
cat(c('F1 global: ', F_dt_test), '\n')
accuracy_dt_test = (tabla_test_arbol[1,1]+tabla_test_arbol[2,2]) / (tabla_test_arbol[1,1]+tabla_test_arbol[1,2]+tabla_test_arbol[2,1]+tabla_test_arbol[2,2])
cat(c('Accuracy: ', F_dt_test), '\n')
set.seed(1234)
randomforest_model_all=randomForest(price_categ1~.,
data=datos_train_limpio,
parms=list(split="gini"),
ntree=50,
importance = FALSE,
proximity = FALSE,
mtry=6,
replace = TRUE)
randomforest_model_all$importance
print(randomforest_model_all)
set.seed(1234)
randomforest_model=randomForest(price_categ1~log_sqft_living+log_lot+lat+long,
data=datos_train_limpio,
parms=list(split="gini"),
ntree=50,
importance = FALSE,
proximity = FALSE,
mtry=3,
replace = TRUE)
print(randomforest_model)
tabla_train_randomforest = table(obs = datos_train_limpio$price_categ1, pred = predict(randomforest_model, type = "class") )
tabla_train_randomforest
mosaic(tabla_train_randomforest, shade = T, colorize = T, main="Matriz Confusión",gp = gpar(fill = matrix(c("cyan3", "salmon", "salmon", "cyan3"), 2, 2)))
pred_caras_rf_train = tabla_train_randomforest[2,2]/(tabla_train_randomforest[2,2]+tabla_train_randomforest[1,2])
rec_caras_rf_train = tabla_train_randomforest[2,2]/(tabla_train_randomforest[2,2]+tabla_train_randomforest[2,1])
F_caras_rf_train=(2*pred_caras_rf_train*rec_caras_rf_train)/(pred_caras_rf_train+rec_caras_rf_train)
cat(c('F1 caras: ', F_caras_rf_train), '\n')
pred_baratas_rf_train = tabla_train_randomforest[1,1]/(tabla_train_randomforest[1,1]+tabla_train_randomforest[2,1])
rec_baratas_rf_train=tabla_train_randomforest[1,1]/(tabla_train_randomforest[1,1]+tabla_train_randomforest[1,2])
F_baratas_rf_train=(2*pred_baratas_rf_train*rec_baratas_rf_train)/(pred_baratas_rf_train+rec_baratas_rf_train)
cat(c('F1 baratas: ', F_baratas_rf_train), '\n')
F_rf_train= (F_caras_rf_train+F_baratas_rf_train)/2
cat(c('F1 global: ', F_rf_train), '\n')
accuracy_rf_train = (tabla_train_randomforest[1,1]+tabla_train_randomforest[2,2]) / (tabla_train_randomforest[1,1]+tabla_train_randomforest[1,2]+tabla_train_randomforest[2,1]+tabla_train_randomforest[2,2])
cat(c('Accuracy: ', accuracy_rf_train), '\n')
tabla_test_randomforest = table(obs = datos_test_limpio$price_categ1, pred = predict(randomforest_model, datos_test_limpio[,-15], type = "class") )
tabla_test_randomforest
pred_caras_rf_test = tabla_test_randomforest[2,2]/(tabla_test_randomforest[2,2]+tabla_test_randomforest[1,2])
rec_caras_rf_test = tabla_test_randomforest[2,2]/(tabla_test_randomforest[2,2]+tabla_test_randomforest[2,1])
F_caras_rf_test=(2*pred_caras_rf_test*rec_caras_rf_test)/(pred_caras_rf_test+rec_caras_rf_test)
cat(c('F1 caras: ', F_caras_rf_test), '\n')
pred_baratas_rf_test = tabla_test_randomforest[1,1]/(tabla_test_randomforest[1,1]+tabla_test_randomforest[2,1])
rec_baratas_rf_test=tabla_test_randomforest[1,1]/(tabla_test_randomforest[1,1]+tabla_test_randomforest[1,2])
F_baratas_rf_test=(2*pred_baratas_rf_test*rec_baratas_rf_test)/(pred_baratas_rf_test+rec_baratas_rf_test)
cat(c('F1 baratas: ', F_baratas_rf_test), '\n')
F_rf_test= (F_caras_rf_test+F_baratas_rf_test)/2
cat(c('F1 global: ', F_rf_test), '\n')
accuracy_rf_test = (tabla_test_randomforest[1,1]+tabla_test_randomforest[2,2]) / (tabla_test_randomforest[1,1]+tabla_test_randomforest[1,2]+tabla_test_randomforest[2,1]+tabla_test_randomforest[2,2])
cat(c('Accuracy: ', accuracy_rf_test), '\n')
# set.seed(1234)
# svm_tune3 <- tune("svm", price_categ1 ~ log_sqft_living + zona + lat, data = datos_train_limpio, kernel = 'radial',
#                ranges = list(cost = c(0.01, 0.1,1, 10,100), gamma = c(0.01, 0.1, 1, 10, 100)))
load("svm_tune2.RData")
svm_tune <- svm_tune3
svm_tune$best.parameters
rm(svm_tune3)
best_cost <- svm_tune$best.parameters[1]
best_gamma <- svm_tune$best.parameters[2]
set.seed(1234)
modelo_svm <- e1071::svm(formula = price_categ1 ~ log_sqft_living + zona + lat,
data = datos_train_limpio,
kernel = "radial",
probability =TRUE,
gamma = best_gamma$gamma,
cost = best_cost$cost)
summary(modelo_svm)
tabla_svm_train=table(obs = datos_train_limpio$price_categ1, pred = predict(modelo_svm,datos_train_limpio[,-15], type ="class"))
tabla_svm_train
pred_caras_svm_train=tabla_svm_train[2,2]/(tabla_svm_train[2,2]+tabla_svm_train[1,2])
rec_caras_svm_train=tabla_svm_train[2,2]/(tabla_svm_train[2,2]+tabla_svm_train[2,1])
F_caras_svm_train=(2*pred_caras_svm_train*rec_caras_svm_train)/(pred_caras_svm_train+rec_caras_svm_train)
cat(c('F1 caras: ', F_caras_svm_train), '\n')
pred_baratas_svm_train=tabla_svm_train[1,1]/(tabla_svm_train[1,1]+tabla_svm_train[2,1])
rec_baratas_svm_train=tabla_svm_train[1,1]/(tabla_svm_train[1,1]+tabla_svm_train[1,2])
F_baratas_svm_train=(2*pred_baratas_svm_train*rec_baratas_svm_train)/(pred_baratas_svm_train+rec_baratas_svm_train)
cat(c('F1 baratas: ', F_baratas_svm_train), '\n')
F_svm_train= (F_caras_svm_train+F_baratas_svm_train)/2
cat(c('F1 global: ', F_svm_train), '\n')
accuracy_svm_train = (tabla_svm_train[1,1]+tabla_svm_train[2,2]) / (tabla_svm_train[1,1]+tabla_svm_train[1,2]+tabla_svm_train[2,1]+tabla_svm_train[2,2])
cat(c('Accuracy: ', accuracy_svm_train), '\n')
tabla_svm_test=table(obs = datos_test_limpio$price_categ1,  pred = predict(modelo_svm,datos_test_limpio[,-15], type ="class"))
tabla_svm_test
pred_caras_svm_test=tabla_svm_test[2,2]/(tabla_svm_test[2,2]+tabla_svm_test[1,2])
rec_caras_svm_test=tabla_svm_test[2,2]/(tabla_svm_test[2,2]+tabla_svm_test[2,1])
F_caras_svm_test=(2*pred_caras_svm_test*rec_caras_svm_test)/(pred_caras_svm_test+rec_caras_svm_test)
cat(c('F1 caras: ', F_caras_svm_test), '\n')
pred_baratas_svm_test=tabla_svm_test[1,1]/(tabla_svm_test[1,1]+tabla_svm_test[2,1])
rec_baratas_svm_test=tabla_svm_test[1,1]/(tabla_svm_test[1,1]+tabla_svm_test[1,2])
F_baratas_svm_test=(2*pred_baratas_svm_test*rec_baratas_svm_test)/(pred_baratas_svm_test+rec_baratas_svm_test)
cat(c('F1 baratas: ', F_baratas_svm_test), '\n')
F_svm_test= (F_caras_svm_test+F_baratas_svm_test)/2
cat(c('F1 global: ', F_svm_test), '\n')
accuracy_svm_test = (tabla_svm_test[1,1]+tabla_svm_test[2,2]) / (tabla_svm_test[1,1]+tabla_svm_test[1,2]+tabla_svm_test[2,1]+tabla_svm_test[2,2])
cat(c('Accuracy: ', accuracy_svm_test), '\n')
models_cross = data.frame(
"Modelo"= c('GLM','GAM','KNN','Decision_Tree','Random_Forest','SVM'),
"F_Medida_train" = c(F_reglog_train,F_gam_train,F_knn_train,F_dt_train,F_rf_train,F_svm_train),
"F_Medida_test" = c(F_reglog_test,F_gam_test, F_knn_test,F_dt_test,F_rf_test,F_svm_test))
models_cross = models_cross[order(-models_cross$F_Medida_train),]
models_cross
ggplot(data=models_cross, aes(x=reorder(Modelo,F_Medida_train), y=F_Medida_train, fill=Modelo)) +
xlab("Modelos") +
geom_bar(stat="identity")
roc_f1 <- function(pred) {
perf_t <- performance(pred,"tpr","tnr")
perf_f <- performance(pred,"fpr","fnr")
perf_global <- data.frame(perf_t@x.values,
perf_t@y.values,
perf_f@x.values,
perf_f@y.values,
perf_t@alpha.values,
perf_f@alpha.values)
colnames(perf_global) <- c(perf_t@x.name, perf_t@y.name, perf_f@x.name, perf_f@y.name, 'alpha_t', 'alpha_f')
perf_global$pred_caras <- perf_global$`True positive rate`/(perf_global$`True positive rate`+perf_global$`False positive rate`)
perf_global$rec_caras <- perf_global$`True positive rate`/(perf_global$`True positive rate`+perf_global$`False negative rate`)
perf_global$f1_caras <- (2*perf_global$pred_caras*perf_global$rec_caras)/(perf_global$pred_caras+perf_global$rec_caras)
perf_global$pred_baratas <- perf_global$`True negative rate`/(perf_global$`True negative rate`+perf_global$`False negative rate`)
perf_global$rec_baratas <- perf_global$`True negative rate`/(perf_global$`True negative rate`+perf_global$`False positive rate`)
perf_global$f1_baratas <- (2*perf_global$pred_baratas*perf_global$rec_baratas)/(perf_global$pred_baratas+perf_global$rec_baratas)
return (perf_global)
}
set.seed(1234)
# GLM-REGRESIÓN LOGÍSTICA
predictions_glm <- predict(model_glm, newdata = datos_train_rl, type = "response")
pred_glm <- prediction(predictions_glm, datos_train_rl$price_categ1)
roc_glm <- roc_f1(pred_glm)
# GAM
predictions_gam <- as.data.frame(predict( model_gam_categ, type = "response"))
pred_gam <- prediction(predictions_gam, datos_train_limpio$price_categ1)
roc_gam <- roc_f1(pred_gam)
# KNN
predictions_Knn <- knn(scale(datos_train_numeric), scale(datos_train_numeric), cl=datos_train_limpio$price_categ1, k=14, prob = TRUE)
pred_knn <- prediction(attr(predictions_Knn,"prob"), datos_train_limpio$price_categ1)
roc_knn <- roc_f1(pred_knn)
# ARBOL DE DECISION
predictions_tree <- predict(decisiontree_model, newdata = datos_decision_tree, type = "prob")
pred_tree = prediction(predictions_tree[,2], datos_decision_tree$price_categ1)
roc_dt <- roc_f1(pred_tree)
# RANDOM FOREST
predictions_rf <- predict(randomforest_model, new_data=datos_train_limpio, type = "prob")
pred_rf <- prediction(predictions_rf[,2],datos_train_limpio$price_categ1)
roc_rf <- roc_f1(pred_rf)
# SVM
predictions_svm <- predict(modelo_svm, newdata=datos_train_limpio, probability = TRUE)
prob_svm<-attr(predictions_svm,"probabilities")
pred_svm <- prediction(prob_svm[,2], datos_train_limpio$price_categ)
roc_svm <- roc_f1(pred_svm)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type = 'l', xlim=c(1,0), ylim=c(0,1), xlab="F1-baratas", ylab="F1-caras")
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="purple")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="left", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","purple","orange","red","green","yellow"), cex=0.8)
set.seed(1234)
# REGRESIÓN LOGÍSTICA
perf_glm <- performance(pred_glm,"spec","sens")
# GAM
perf_gam <- performance(pred_gam,"spec","sens")
# KNN
perf_knn <- performance(pred_knn,"spec","sens")
# ARBOL DE DECISION
perf_tree = performance(pred_tree,"spec","sens")
# RANDOM FOREST
perf_rf <- performance(pred_rf,"spec","sens")
# SVM
perf_svm <- performance(pred_svm,"spec","sens")
plot(perf_glm,col="blue", xlim=c(1,0))
plot(perf_gam,col="purple", add = TRUE)
plot(perf_knn, col="orange",add = TRUE)
plot(perf_tree, col="red",add = TRUE)
plot(perf_rf,col="green", add = TRUE)
plot(perf_svm, col="yellow",add = TRUE)
legend(x="right", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","purple","orange","red","green","yellow"), cex=0.8)
set.seed(1234)
randomforest_model_all=randomForest(price_categ1~.,
data=datos_train_limpio,
parms=list(split="gini"),
ntree=50,
importance = FALSE,
proximity = FALSE,
mtry=6,
replace = TRUE)
randomforest_model_all$importance
tabla_validacion_randomforest = table(obs = datos_validacion_limpio$price_categ1, pred = predict(randomforest_model, datos_validacion_limpio[,-15], type = "class") )
tabla_validacion_randomforest
pred_caras_rf_validacion = tabla_validacion_randomforest[2,2]/(tabla_validacion_randomforest[2,2]+tabla_validacion_randomforest[1,2])
rec_caras_rf_validacion = tabla_validacion_randomforest[2,2]/(tabla_validacion_randomforest[2,2]+tabla_validacion_randomforest[2,1])
F_caras_rf_validacion=(2*pred_caras_rf_validacion*rec_caras_rf_validacion)/(pred_caras_rf_validacion+rec_caras_rf_validacion)
cat(c('F1 caras: ', F_caras_rf_validacion), '\n')
pred_baratas_rf_validacion = tabla_validacion_randomforest[1,1]/(tabla_validacion_randomforest[1,1]+tabla_validacion_randomforest[2,1])
rec_baratas_rf_validacion=tabla_validacion_randomforest[1,1]/(tabla_validacion_randomforest[1,1]+tabla_validacion_randomforest[1,2])
F_baratas_rf_validacion=(2*pred_baratas_rf_validacion*rec_baratas_rf_validacion)/(pred_baratas_rf_validacion+rec_baratas_rf_validacion)
cat(c('F1 baratas: ', F_baratas_rf_validacion), '\n')
F_rf_validacion= (F_caras_rf_validacion+F_baratas_rf_validacion)/2
cat(c('F1 global: ', F_rf_validacion), '\n')
accuracy_rf_validacion = (tabla_validacion_randomforest[1,1]+tabla_validacion_randomforest[2,2]) / (tabla_validacion_randomforest[1,1]+tabla_validacion_randomforest[1,2]+tabla_validacion_randomforest[2,1]+tabla_validacion_randomforest[2,2])
cat(c('Accuracy: ', accuracy_rf_validacion), '\n')
