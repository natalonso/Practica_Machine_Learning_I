text(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], as.character(datos_train$price_categ2), col=colores22)
datos.scale<- as.data.frame(scale(datos_train_km))
modelkm1 <- kmeans(datos.scale, centers=2)
#modelkm
table(modelkm$cluster) #asignación de observación a los cluster
modelkm$totss  #Inercia total
modelkm$betweenss  #Inercia inter grupos
modelkm$withinss   #Inercia intra grupos
modelkm$tot.withinss  #inercia total intra grupos
datos.scale<- as.data.frame(scale(datos_train_km))
modelkm1 <- kmeans(datos.scale, centers=2)
#modelkm
# table(modelkm1$cluster) #asignación de observación a los cluster
# modelkm1$totss  #Inercia total
# modelkm1$betweenss  #Inercia inter grupos
# modelkm1$withinss   #Inercia intra grupos
# modelkm1$tot.withinss  #inercia total intra grupos
datos.scale<- as.data.frame(scale(datos_train_km))
modelkm1 <- kmeans(datos.scale, centers=2)
modelkm2 <- kmeans(datos.scale, centers=3)
#modelkm
# table(modelkm1$cluster) #asignación de observación a los cluster
# modelkm1$totss  #Inercia total
# modelkm1$betweenss  #Inercia inter grupos
# modelkm1$withinss   #Inercia intra grupos
# modelkm1$tot.withinss  #inercia total intra grupos
plot(prcomp(datos_nuevos[,-c(1,12)], scale = T)$x[,1:2], type="n")
colores1= c("red","blue")
colores11 = colores[datos_train$price_categ1]
plot(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], as.character(modelkm1$cluster), col=colores11)
colores2= c("red","blue","green")
colores22 = colores[datos_train$price_categ2]
plot(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], as.character(modelkm2$cluster), col=colores22)
colores1= c("red","blue")
colores11 = colores[datos_train$price_categ1]
plot(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], as.character(modelkm1$cluster), col=colores11)
colores2= c("red","blue","green")
colores22 = colores[datos_train$price_categ2]
plot(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], as.character(modelkm2$cluster), col=colores22)
datos_train_km <- datos_train[c(22,23,6,7:10,25,12,24,17:20,26)] %>%
select_if(is.numeric)
View(datos_train)
datos_train_km <- datos_train[c(3,23,6,7:10,25,12,24,17:20,26)] %>%
select_if(is.numeric)
View(datos_train_km)
datos_train_km <- datos_train[c(3,22,23,6,7:10,25,12,24,17:20,26)] %>%
select_if(is.numeric)
View(datos_train_km)
datos_train_km <- datos_train[c(3,22,6,7:10,25,12,24,17:20,26)] %>%
select_if(is.numeric)
View(datos_train_km)
#datos <- read.csv("C:/Users/natal/OneDrive/Documentos/0_MIS_DOCUMENTOS/2.MÁSTER/2_Curso_2019-2020/Primer_Cuatrimestre/2.Fundamentos_de_Análisis/BloqueIV_Métodos/Práctica final/git/kc_house_data.csv")
datos <- read.csv("C:/Users/Beatriz/Desktop/Máster/1er trimestre/Fundamentos/Parte 4_Métodos de Análisis de datos/Prac_git/kc_house_data.csv")
#datos <- read.csv("C:/Users/susi_/Desktop/R/Practica_Fundamentos_R/Repositorios git/kc_house_data.csv")
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(dplyr)
library(VIM)
library(mice)
library(DMwR2)
library(knitr)
library(kableExtra)
library(htmltools)
library(bsplus)
library(RColorBrewer)
library(GGally)
library(ggplot2)
library(corrplot)
library(vcd)
library(DT)
library(gridExtra)
library(jpeg)
library(car)
library(leaflet)
library(scales)
library(cowplot)
library(useful)
library(rpart)
library(rattle)
#Categorizamos la variable respuesta price:
quantile(datos$price, prob=seq(0, 1, length = 5))
datos$price_categ1 <- cut(datos$price, breaks = c(0, 500000, 100000000), labels = c("B1", "A1"))
table(datos$price_categ1)
datos$price_categ2 <- cut(datos$price, breaks = c(0, 330000, 650000, 100000000), labels = c("B2","M2", "A2"))
table(datos$price_categ2)
num_total=nrow(datos)
set.seed(122556) #reproductividad
# 70% para train
indices_train = sample(1:num_total, .7*num_total)
datos_train = datos[indices_train,]
# 15% para test
indices=seq(1:num_total)
indices_test=indices[-indices_train]
indices_test1 = sample(indices_test, .15*num_total)
datos_test = datos[indices_test1,]
# 15% para validacion
indices_validacion=indices[c(-indices_train,-indices_test1)]
datos_validacion=datos[indices_validacion,]
datatable(head(datos_train))
str(datos_train)
summary(datos_train)
datos_train <- datos_train[,-2]
datos_train$id <- as.factor(datos_train$id)
options(scipen=999)
options(repr.plot.width=6, repr.plot.height=3,align="center")
ggplot(datos_train, aes(x= price)) + geom_histogram(aes(y=..density..), bins=30, colour="black", fill="white") + geom_density(alpha=.3, fill="#E1AF00")
datos_train$log_price<- log10(datos_train$price)
options(scipen=999)
options(repr.plot.width=6, repr.plot.height=3,align="center")
ggplot(datos_train, aes(x=log_price)) + geom_histogram(aes(y=..density..), bins=30, colour="black", fill="white") + geom_density(alpha=.3, fill="#E1AF00")
table(datos_train$bedrooms)
class(datos_train$bedrooms)
p1<-ggplot(datos_train, aes(x=bedrooms)) + geom_histogram(colour="black", bins =30,fill="tomato")
p2<-ggplot(datos_train, aes(x=as.factor(bedrooms), y=log_price, fill=as.factor(bedrooms))) + geom_boxplot()+
labs(x="bedrooms")+theme(legend.position="none")
grid.arrange(p1, p2, nrow = 1)
table(datos_train$bathrooms)
datos_train$bathrooms_group <- cut(datos_train$bathrooms,breaks = c(-1,0.25,1,2,3,4,5,6,7,8),labels=c(0,1,2,3,4,5,6,7,8))
datos_train$bathrooms_group <- as.numeric(as.character(datos_train$bathrooms_group))
table(datos_train$bathrooms_group)
#Dibujamos cómo queda agrupada enfrentada con la variable "price" ya transformada:
ggplot(datos_train, aes(x=as.factor(datos_train$bathrooms_group), y=log_price, fill=as.factor(datos_train$bathrooms_group))) + geom_boxplot()+
labs(x="bathrooms_group")+theme(legend.position="none")
p5<-ggplot(datos_train, aes(x=sqft_living)) + geom_histogram(aes(y=..density..), bins=30, colour="black", fill="white") + geom_density(alpha=.3, fill="#E1AF00")
p6<-ggplot(datos_train, aes(sqft_living, log_price)) +
geom_point(alpha = 0.5) +
geom_smooth(se = F, method = "lm", color = "red") +
scale_y_continuous(breaks = seq(0,8000000, by = 1000000))
grid.arrange(p5,p6, nrow=1)
datos_train$log_sqft_living<- log10(datos_train$sqft_living)
p5.1 <- ggplot(datos_train, aes(x=log_sqft_living)) + geom_histogram(aes(y=..density..), bins=30, colour="black", fill="white") + geom_density(alpha=.3, fill="#E1AF00")
p6.1 <- ggplot(datos_train, aes(log_sqft_living, log_price)) +
geom_point(alpha = 0.5) +
geom_smooth(se = F, method = "lm", color = "red") +
scale_y_continuous(breaks = seq(0,8000000, by = 1000000))
grid.arrange(p5.1,p6.1, nrow=1)
p7<-ggplot(datos_train, aes(x=sqft_lot)) + geom_histogram(aes(y=..density..), bins=30, colour="black", fill="tomato")
p8<-ggplot(datos_train, aes(sqft_lot, log_price)) +
geom_point(alpha = 0.5) +
geom_smooth(se = F, method = "lm", color = "blue") +
scale_y_continuous(breaks = seq(0,8000000, by = 1000000))
grid.arrange(p7,p8, nrow=1)
table(datos_train$floors)
p9<-ggplot(datos_train, aes(x=as.factor(floors))) + geom_histogram(colour="black", stat ="count",fill="tomato")
p10<-ggplot(datos_train, aes(x=as.factor(floors), y=log_price, fill=as.factor(floors))) + geom_boxplot()+
labs(x="floors")+theme(legend.position="none")
grid.arrange(p9,p10, nrow=1)
p16<-ggplot(datos_train, aes(x=sqft_above)) + geom_histogram(aes(y=..density..), bins=30, colour="black", fill="white") + geom_density(alpha=.3, fill="#E1AF00")
p17<-ggplot(datos_train, aes(sqft_above, log_price)) +
geom_point(alpha = 0.5) +
geom_smooth(se = F, method = "lm", color = "blue") +
scale_y_continuous(breaks = seq(0,8000000, by = 1000000))
grid.arrange(p16,p17, nrow=1)
options(scipen=999)
options(repr.plot.width=6, repr.plot.height=3,align="center")
ggplot(datos_train, aes(x=sqft_basement)) + geom_histogram(bins=30, colour="black", fill="#E1AF00")
datos_train$sqft_basement_cat <- cut(datos_train$sqft_basement,breaks = c(-1,0,6000),labels=c(0,1))
table(datos_train$sqft_basement_cat)
ggplot(datos_train, aes(x=log_price, fill= as.factor(sqft_basement_cat))) + geom_density(alpha=.3)
options(scipen=999)
options(repr.plot.width=6, repr.plot.height=3,align="center")
ggplot(datos_train, aes(x=sqft_living15)) + geom_histogram(bins=30, colour="black", fill="#E1AF00")
options(scipen=999)
options(repr.plot.width=6, repr.plot.height=3,align="center")
ggplot(datos_train, aes(x=sqft_lot15)) + geom_histogram(bins=30, colour="black", fill="#E1AF00")
datos_train$waterfront<-as.factor(datos_train$waterfront)
table(datos_train$waterfront)
ggplot(datos_train, aes(x=log_price, fill=as.factor(waterfront))) + geom_histogram(binwidth=0.1, alpha=.5, position="identity")
datos_train$view<-as.factor(datos_train$view)
table(datos_train$view)
p11<-ggplot(datos_train, aes(x=view)) + geom_histogram(colour="black",fill="tomato",stat="count")
p12<-ggplot(datos_train, aes(x=view, y=log_price, fill=as.factor(view))) + geom_boxplot()+
labs(x="view")+theme(legend.position="none")
grid.arrange(p11,p12, nrow=1)
datos_train$condition<-as.factor(datos_train$condition)
table(datos_train$condition)
p13<-ggplot(datos_train, aes(x=condition)) + geom_histogram(colour="black", stat ="count",fill="tomato")
p14<-ggplot(datos_train, aes(x=as.factor(condition), y=log_price, fill=as.factor(condition))) + geom_boxplot()+
labs(x="condition")+theme(legend.position="none")
grid.arrange(p13,p14, nrow=1)
table(datos_train$grade)
p14<-ggplot(datos_train, aes(x=as.factor(grade))) + geom_histogram(colour="black", stat ="count",fill="tomato")
p15<-ggplot(datos_train, aes(x=as.factor(grade), y=log_price, fill=as.factor(grade))) + geom_boxplot()+
labs(x="grade")+theme(legend.position="none")
grid.arrange(p14,p15, nrow=1)
datos_train$grade_categ <- cut(datos_train$grade, breaks = c(0,4,9,13), labels = c(0,1,2))
table(datos_train$grade_categ)
#Dibujamos cómo queda categorizada enfrentada con la variable "log_price"
ggplot(datos_train, aes(x=as.factor(datos_train$grade_categ), y=log_price, fill=as.factor(datos_train$grade_categ))) + geom_boxplot() + labs(x="grade_categ")+theme(legend.position="none")
table(datos_train$yr_built)
options(scipen=999)
options(repr.plot.width=6, repr.plot.height=3,align="center")
ggplot(datos_train, aes(x=yr_built)) + geom_histogram(colour="black",bins=30, fill="#E1AF00")
table(datos_train$yr_renovated)
datos_train$yr_renovated_catg <-cut(datos_train$yr_renovated, breaks=c(-0.5,1933, 2015), labels= c("0","1"))
table(datos_train$yr_renovated_catg)
#Dibujamos cómo queda categorizada enfrentada con la variable "log_price"
ggplot(datos_train, aes(x=as.factor(datos_train$yr_renovated_catg), y=log_price, fill=as.factor(datos_train$yr_renovated_catg))) + geom_boxplot() + labs(x="0-No renovación / 1-Renovación")+theme(legend.position="none")
datos_train$zipcode<-as.factor(datos_train$zipcode)
table(datos_train$zipcode)
datos_train$Pricegroup<-cut(datos_train$price, c(0,250000,500000,750000,1000000,2000000,100000000), labels = c("Entre 0 y 250$","Entre 250$ y 500$","Entre 500$ y 750$","Entre 750$ y 1.000$","Entre 1.000$ y 2.000$","Más de 2.000$"))
center_lon = median(datos_train$long,na.rm = TRUE)
center_lat = median(datos_train$lat,na.rm = TRUE)
factpal <- colorFactor(c("black","blue","yellow","orange","pink","red"),
datos_train$Pricegroup )
# leaflet(datos_train) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
#   addCircles(lng = ~long, lat = ~lat,
#              color = ~factpal(Pricegroup))  %>%
#   # controls
#   setView(lng=center_lon, lat=center_lat,zoom = 12) %>%
#
#   addLegend("bottomright", pal = factpal , values = ~Pricegroup,
#             title = "Precio (en miles de $)",
#             opacity = 1)
#Contar el total de NAs en la base de datos
sum(is.na(datos_train))
datos_train$posicion<-c(1:nrow(datos_train))
indices_cero_habitaciones<-datos_train[datos_train$bedrooms==0,]$posicion
datos_train<-datos_train[-indices_cero_habitaciones,]
datos_train$posicion<-c(1:nrow(datos_train))
indices_cero_banos<-datos_train$posicion[datos_train$bathrooms_group==0]
datos_train<-datos_train[-indices_cero_banos,]
# datos_train_cor2 <- datos_train[,c(21,3,22,23,6,7,12,17:20)]
# correlation_matrix2 <- cor(datos_train_cor2, method = "spearman")
# corrplot(correlation_matrix2, method = "color", tl.srt=45, addCoef.col ="black", number.cex =0.6,
#          tl.cex = 0.7,tl.col="black", type= "upper")
View(datos_train)
datos_train_km <- datos_train[c(3,22,6,7:10,25,12,24,17:20,26)] %>%
select_if(is.numeric)
View(datos_train_km)
colores1= c("red","blue")
colores11 = colores[datos_train$price_categ1]
colores1= c("red","blue")
colores11 = colores1[datos_train$price_categ1]
plot(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], as.character(datos_train$price_categ2), col=colores11)
colores2= c("red","blue","green")
colores22 = colores2[datos_train$price_categ2]
plot(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], as.character(datos_train$price_categ2), col=colores22)
datos.scale<- as.data.frame(scale(datos_train_km))
modelkm1 <- kmeans(datos.scale, centers=2)
modelkm2 <- kmeans(datos.scale, centers=3)
#modelkm
# table(modelkm1$cluster) #asignación de observación a los cluster
# modelkm1$totss  #Inercia total
# modelkm1$betweenss  #Inercia inter grupos
# modelkm1$withinss   #Inercia intra grupos
# modelkm1$tot.withinss  #inercia total intra grupos
colores1= c("red","blue")
colores11 = colores[datos_train$price_categ1]
colores1= c("red","blue")
colores11 = colores1[datos_train$price_categ1]
plot(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], as.character(modelkm1$cluster), col=colores11)
colores2= c("red","blue","green")
colores22 = colores2[datos_train$price_categ2]
plot(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_km[,-c(1,12)], scale = T)$x[,1:2], as.character(modelkm2$cluster), col=colores22)
datos.scale<- as.data.frame(scale(datos_train_km))
modelkm1 <- kmeans(datos.scale, centers=2)
modelkm2 <- kmeans(datos.scale, centers=3)
#modelkm
table(modelkm2$cluster) #asignación de observación a los cluster
# modelkm1$totss  #Inercia total
# modelkm1$betweenss  #Inercia inter grupos
# modelkm1$withinss   #Inercia intra grupos
# modelkm1$tot.withinss  #inercia total intra grupos
colores1= c("red","blue")
colores11 = colores1[datos_train$price_categ1]
plot(prcomp(datos_train_km, scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_km, scale = T)$x[,1:2], as.character(datos_train$price_categ2), col=colores11)
colores2= c("red","blue","green")
colores22 = colores2[datos_train$price_categ2]
plot(prcomp(datos_train_km, scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_km, scale = T)$x[,1:2], as.character(datos_train$price_categ2), col=colores22)
colores1= c("red","blue")
colores11 = colores1[datos_train$price_categ1]
plot(prcomp(datos_train_km, scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_km, scale = T)$x[,1:2], as.character(datos_train$price_categ1), col=colores11)
colores2= c("red","blue","green")
colores22 = colores2[datos_train$price_categ2]
plot(prcomp(datos_train_km, scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_km, scale = T)$x[,1:2], as.character(datos_train$price_categ2), col=colores22)
datos.scale<- as.data.frame(scale(datos_train_km))
modelkm1 <- kmeans(datos.scale, centers=2)
modelkm2 <- kmeans(datos.scale, centers=3)
#modelkm
table(modelkm2$cluster) #asignación de observación a los cluster
# modelkm1$totss  #Inercia total
# modelkm1$betweenss  #Inercia inter grupos
# modelkm1$withinss   #Inercia intra grupos
# modelkm1$tot.withinss  #inercia total intra grupos
colores1= c("red","blue")
colores11 = colores1[datos_train$price_categ1]
plot(prcomp(datos_train_km, scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_km, scale = T)$x[,1:2], as.character(modelkm1$cluster), col=colores11)
colores2= c("red","blue","green")
colores22 = colores2[datos_train$price_categ2]
plot(prcomp(datos_train_km, scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_km, scale = T)$x[,1:2], as.character(modelkm2$cluster), col=colores22)
#id
datos_test$id <- as.factor(datos_test$id)
#price
datos_test$log_price <- log10(datos_test$price)
#bathrooms
datos_test$bathrooms_group <- cut(datos_test$bathrooms,breaks = c(-1,0.25,1,2,3,4,5,6,7,8),labels=c(0,1,2,3,4,5,6,7,8))
datos_test$bathrooms_group <- as.numeric(datos_test$bathrooms_group)
#sqft_living
datos_test$log_sqft_living<- log10(datos_test$sqft_living)
#waterfront
datos_test$waterfront <- as.factor(datos_test$waterfront)
#view
datos_test$view <- as.factor(datos_test$view)
#condition
datos_test$condition <- as.factor(datos_test$condition)
#grade
datos_test$grade_categ <- cut(datos_test$grade, breaks = c(0,4,9,13), labels = c(0,1,2))
#sqft_basement
datos_test$sqft_basement_cat <- cut(datos_test$sqft_basement,breaks = c(-1,0,6000),labels=c(0,1))
#yr_renovated
datos_test$yr_renovated_catg <-cut(datos_test$yr_renovated, breaks=c(-0.5,1933, 2015), labels= c("0","1"))
#datos de test solo con las variables transformadas y sin la variable respuesta
datos_test_mod <- datos_test[c(1,22,4,23,24,7:11,25,13,26,15,27,17:21)]
#datos <- read.csv("C:/Users/natal/OneDrive/Documentos/0_MIS_DOCUMENTOS/2.MÁSTER/2_Curso_2019-2020/Primer_Cuatrimestre/2.Fundamentos_de_Análisis/BloqueIV_Métodos/Práctica final/git/kc_house_data.csv")
datos <- read.csv("C:/Users/Beatriz/Desktop/Máster/1er trimestre/Fundamentos/Parte 4_Métodos de Análisis de datos/Prac_git/kc_house_data.csv")
#datos <- read.csv("C:/Users/susi_/Desktop/R/Practica_Fundamentos_R/Repositorios git/kc_house_data.csv")
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(dplyr)
library(VIM)
library(mice)
library(DMwR2)
library(knitr)
library(kableExtra)
library(htmltools)
library(bsplus)
library(RColorBrewer)
library(GGally)
library(ggplot2)
library(corrplot)
library(vcd)
library(DT)
library(gridExtra)
library(jpeg)
library(car)
library(leaflet)
library(scales)
library(cowplot)
library(useful)
library(rpart)
library(rattle)
library(class)
#Categorizamos la variable respuesta price:
quantile(datos$price, prob=seq(0, 1, length = 5))
datos$price_categ1 <- cut(datos$price, breaks = c(0, 500000, 100000000), labels = c("B1", "A1"))
table(datos$price_categ1)
datos$price_categ2 <- cut(datos$price, breaks = c(0, 330000, 650000, 100000000), labels = c("B2","M2", "A2"))
table(datos$price_categ2)
num_total=nrow(datos)
set.seed(122556) #reproductividad
# 70% para train
indices_train = sample(1:num_total, .7*num_total)
datos_train = datos[indices_train,]
# 15% para test
indices=seq(1:num_total)
indices_test=indices[-indices_train]
indices_test1 = sample(indices_test, .15*num_total)
datos_test = datos[indices_test1,]
# 15% para validacion
indices_validacion=indices[c(-indices_train,-indices_test1)]
datos_validacion=datos[indices_validacion,]
datos_train <- datos_train[,-2]
datos_train$id <- as.factor(datos_train$id)
datos_train$bathrooms_group <- cut(datos_train$bathrooms,breaks = c(-1,0.25,1,2,3,4,5,6,7,8),labels=c(0,1,2,3,4,5,6,7,8))
datos_train$bathrooms_group <- as.numeric(as.character(datos_train$bathrooms_group))
datos_train$log_sqft_living <- log10(datos_train$sqft_living)
datos_train$log_lot <- log10(datos_train$sqft_lot)
datos_train$log_above <- log10(datos_train$sqft_above)
datos_train$sqft_basement_cat <- cut(datos_train$sqft_basement,breaks = c(-1,0,6000),labels=c(0,1))
datos_train$waterfront<-as.factor(datos_train$waterfront)
datos_train$view<-as.factor(datos_train$view)
datos_train$condition<-as.factor(datos_train$condition)
table(datos_train$condition)
datos_train$grade_categ <- cut(datos_train$grade, breaks = c(0,4,9,13), labels = c(0,1,2))
datos_train$yr_renovated_catg <-cut(datos_train$yr_renovated, breaks=c(-0.5,1933, 2015), labels= c("0","1"))
datos_train$zipcode<-as.factor(datos_train$zipcode)
datos_train$posicion<-c(1:nrow(datos_train))
indices_cero_habitaciones<-datos_train[datos_train$bedrooms==0,]$posicion
datos_train<-datos_train[-indices_cero_habitaciones,]
datos_train$posicion<-c(1:nrow(datos_train))
indices_cero_banos<-datos_train$posicion[datos_train$bathrooms_group==0]
datos_train<-datos_train[-indices_cero_banos,]
datos_train$posicion<-c(1:nrow(datos_train))
indice_hab33 <- datos_train[datos_train$bedrooms==33,]$posicion
datos_train[datos_train$posicion == indice_hab33,]$bedrooms = 3
datos_train_limpio <- datos_train[c(3,23:27,8:10,28,16:18,29,21,22)]
datos_train_numeric <- datos_train_limpio %>% select_if(is.numeric)
datos_test <- datos_test[,-2]
datos_test$id <- as.factor(datos_test$id)
datos_test$bathrooms_group <- cut(datos_test$bathrooms,breaks = c(-1,0.25,1,2,3,4,5,6,7,8),labels=c(0,1,2,3,4,5,6,7,8))
datos_test$bathrooms_group <- as.numeric(as.character(datos_test$bathrooms_group))
datos_test$log_sqft_living <- log10(datos_test$sqft_living)
datos_test$log_lot <- log10(datos_test$sqft_lot)
datos_test$log_above <- log10(datos_test$sqft_above)
datos_test$sqft_basement_cat <- cut(datos_test$sqft_basement,breaks = c(-1,0,6000),labels=c(0,1))
datos_test$waterfront<-as.factor(datos_test$waterfront)
datos_test$view<-as.factor(datos_test$view)
datos_test$condition<-as.factor(datos_test$condition)
datos_test$grade_categ <- cut(datos_test$grade, breaks = c(0,4,9,13), labels = c(0,1,2))
datos_test$yr_renovated_catg <-cut(datos_test$yr_renovated, breaks=c(-0.5,1933, 2015), labels= c("0","1"))
datos_test$zipcode<-as.factor(datos_test$zipcode)
#datos de test solo con las variables transformadas y sin la variable respuesta
datos_test_limpio <- datos_test[c(3,23:27,8:10,28,16:18,29,21,22)]
datos_validacion <- datos_validacion[,-2]
datos_validacion$id <- as.factor(datos_validacion$id)
datos_validacion$bathrooms_group <- cut(datos_validacion$bathrooms,breaks = c(-1,0.25,1,2,3,4,5,6,7,8),labels=c(0,1,2,3,4,5,6,7,8))
datos_validacion$bathrooms_group <- as.numeric(as.character(datos_validacion$bathrooms_group))
datos_validacion$log_sqft_living <- log10(datos_validacion$sqft_living)
datos_validacion$log_lot <- log10(datos_validacion$sqft_lot)
datos_validacion$log_above <- log10(datos_validacion$sqft_above)
datos_validacion$sqft_basement_cat <- cut(datos_validacion$sqft_basement,breaks = c(-1,0,6000),labels=c(0,1))
datos_validacion$waterfront<-as.factor(datos_validacion$waterfront)
datos_validacion$view<-as.factor(datos_validacion$view)
datos_validacion$condition<-as.factor(datos_validacion$condition)
datos_validacion$grade_categ <- cut(datos_validacion$grade, breaks = c(0,4,9,13), labels = c(0,1,2))
datos_validacion$yr_renovated_catg <-cut(datos_validacion$yr_renovated, breaks=c(-0.5,1933, 2015), labels= c("0","1"))
datos_validacion$zipcode<-as.factor(datos_validacion$zipcode)
#datos de validacion solo con las variables transformadas y sin la variable respuesta
datos_validacion_limpio <- datos_validacion[c(3,23:27,8:10,28,16:18,29,21,22)]
colores1= c("red","blue")
colores11 = colores1[datos_train_limpio$price_categ1]
plot(prcomp(datos_train_numeric, scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_numeric, scale = T)$x[,1:2], as.character(datos_train_limpio$price_categ1), col=colores11)
colores2= c("red","blue","green")
colores22 = colores2[datos_train_limpio$price_categ2]
plot(prcomp(datos_train_numeric, scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_numeric, scale = T)$x[,1:2], as.character(datos_train_limpio$price_categ2), col=colores22)
datos_scale<- as.data.frame(scale(datos_train_numeric))
modelkm1 <- kmeans(datos_scale, centers=2)
modelkm2 <- kmeans(datos_scale, centers=3)
#modelkm
#table(modelkm2$cluster) #asignación de observación a los cluster
# modelkm1$totss  #Inercia total
# modelkm1$betweenss  #Inercia inter grupos
# modelkm1$withinss   #Inercia intra grupos
# modelkm1$tot.withinss  #inercia total intra grupos
colores1= c("red","blue")
colores11 = colores1[datos_train_limpio$price_categ1]
plot(prcomp(datos_train_numeric, scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_numeric, scale = T)$x[,1:2], as.character(modelkm1$cluster), col=colores11)
colores2= c("red","blue","green")
colores22 = colores2[datos_train_limpio$price_categ2]
plot(prcomp(datos_train_numeric, scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_numeric, scale = T)$x[,1:2], as.character(modelkm2$cluster), col=colores22)
tabla2=table(datos_train_limpio[,15],modelkm2$cluster)
pred.means2=tabla2[2,2]/(tabla2[2,2]+tabla2[1,2])
rec.means2=tabla2[2,2]/(tabla2[2,2]+tabla2[2,1])
F_medida.means2=(5*pred.means2*rec.means2)/(4*pred.means2+rec.means2)
F_medida.means2
tabla2
tabla2=table(datos_train_limpio[,15],modelkm1$cluster)
pred.means2=tabla2[2,2]/(tabla2[2,2]+tabla2[1,2])
rec.means2=tabla2[2,2]/(tabla2[2,2]+tabla2[2,1])
F_medida.means2=(5*pred.means2*rec.means2)/(4*pred.means2+rec.means2)
F_medida.means2
tabla2
tabla2=table(datos_train_limpio[,15],modelkm2$cluster)
pred.means2=tabla2[2,2]/(tabla2[2,2]+tabla2[1,2])
rec.means2=tabla2[2,2]/(tabla2[2,2]+tabla2[2,1])
F_medida.means2=(5*pred.means2*rec.means2)/(4*pred.means2+rec.means2)
F_medida.means2
tabla2
tabla2=table(datos_train_limpio[,15],modelkm1$cluster)
pred.means2=tabla2[2,2]/(tabla2[2,2]+tabla2[1,2])
rec.means2=tabla2[2,2]/(tabla2[2,2]+tabla2[2,1])
F_medida.means2=(5*pred.means2*rec.means2)/(4*pred.means2+rec.means2)
F_medida.means2
tabla2
#k=1
#train
constante = 1
knn.train1=knn.cv(scale(datos_train_numeric[,-c(15,16)]),cl=as.factor(datos_train_limpio[,15]),k=constante)
tabla.knn.train1=table(knn.train1,datos_train_limpio[,2])
pred.knn.train1=tabla.knn.train1[2,2]/(tabla.knn.train1[2,2]+tabla.knn.train1[1,2])
rec.knn.train1=tabla.knn.train1[2,2]/(tabla.knn.train1[2,2]+tabla.knn.train1[2,1])
F_medida.knn.train1=(5*pred.knn.train1*rec.knn.train1)/(4*pred.knn.train1+rec.knn.train1)
F_medida.knn.train1
tabla.knn.train1
#k=1
#train
constante = 1
knn.train1=knn.cv(scale(datos_train_numeric[,-c(15,16)]),cl=as.factor(datos_train_limpio[,15]),k=constante)
tabla.knn.train1=table(knn.train1,datos_train_limpio[,15])
pred.knn.train1=tabla.knn.train1[2,2]/(tabla.knn.train1[2,2]+tabla.knn.train1[1,2])
rec.knn.train1=tabla.knn.train1[2,2]/(tabla.knn.train1[2,2]+tabla.knn.train1[2,1])
F_medida.knn.train1=(5*pred.knn.train1*rec.knn.train1)/(4*pred.knn.train1+rec.knn.train1)
F_medida.knn.train1
tabla.knn.train1
#k=2
#train
knn.train2=knn.cv(scale(datos_train_numeric[,-c(15,16)]),cl=as.factor(datos_train_limpio[,15]),k=2)
tabla.knn.train2=table(knn.train2,datos_train_limpio[,15])
pred.knn.train2=tabla.knn.train2[2,2]/(tabla.knn.train2[2,2]+tabla.knn.train2[1,2])
rec.knn.train2=tabla.knn.train2[2,2]/(tabla.knn.train2[2,2]+tabla.knn.train2[2,1])
F_medida.knn.train2=(5*pred.knn.train2*rec.knn.train2)/(4*pred.knn.train2+rec.knn.train2)
F_medida.knn.train2
tabla.knn.train2
