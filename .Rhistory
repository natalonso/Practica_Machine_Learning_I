roc_dt <- roc_f1(pred_tree)
# RANDOM FOREST
predictions_rf <- predict(randomforest_model, new_data=datos_train_limpio, type = "prob")
pred_rf <- prediction(predictions_rf[,2],datos_train_limpio$price_categ1)
roc_rf <- roc_f1(pred_rf)
# SVM
predictions_svm <- predict(modelo_svm, newdata=datos_train_limpio, probability = TRUE)
prob_svm<-attr(predictions_svm,"probabilities")
pred_svm <- prediction(prob_svm[,2], datos_train_limpio$price_categ)
roc_svm <- roc_f1(pred_svm)
plot(roc_glm,col="blue", xlim=c(1,0))
plot(roc_gam,col="black", add = TRUE)
plot(roc_glm, col="blue", xlim=c(1,0))
plot(roc_glm, col="blue", xlim=c(1,0))
plot(roc_gam, col="black")
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", xlim=c(1,0))
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="black")
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="black", add=TRUE)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", xlim=c(1,0))
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="black", add=TRUE)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", xlim=c(1,0))
plot(roc_gam$f1_baratas,roc_gam$f1_caras, col="black", add=TRUE)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", xlim=c(1,0))
plot(roc_gam$f1_baratas,roc_gam$f1_caras, col="black", xlim=c(1,0), add=TRUE)
plot(roc_gam$f1_baratas,roc_gam$f1_caras, col="black", xlim=c(1,0), type= 'l', add=TRUE)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0))
plot(roc_gam$f1_baratas,roc_gam$f1_caras, col="black", xlim=c(1,0), type= 'l', add=TRUE)
plot(roc_gam$f1_baratas,roc_gam$f1_caras, col="black", type= 'l', add=TRUE)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0))
plot(roc_gam$f1_baratas,roc_gam$f1_caras, col="black", type= 'l', add=TRUE)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0))+
roc_gam$f1_baratas,roc_gam$f1_caras)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0))+
roc_gam$f1_baratas,roc_gam$f1_caras))
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0)))+
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0)) +
plot(roc_gam$f1_baratas, roc_gam$f1_caras)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0))
curve(roc_gam$f1_baratas, roc_gam$f1_caras)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0))
curve(roc_gam$f1_baratas, roc_gam$f1_caras,add=T)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0))
plot(roc_gam$f1_baratas, roc_gam$f1_caras,add=T)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0))
line(roc_gam$f1_baratas, roc_gam$f1_caras,add=T)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0))
plot(roc_gam$f1_baratas, roc_gam$f1_caras, add=T)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, add=T)
lines(roc_gam$f1_baratas, roc_gam$f1_caras)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0))
lines(roc_gam$f1_baratas, roc_gam$f1_caras)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="black")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="black")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="right", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","black","red","green","yellow","orange"), cex=0.8)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0), ylin=c(0,1))
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0), ylim=c(0,1))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="black")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="right", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","black","red","green","yellow","orange"), cex=0.8)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0), ylim=c(0,1))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="black")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="right", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","black","red","green","yellow","orange"), cex=0.5)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0), ylim=c(0,1))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="black")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="buttonright", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","black","red","green","yellow","orange"), cex=0.5)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0), ylim=c(0,1))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="black")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="button_right", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","black","red","green","yellow","orange"), cex=0.5)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(1,0), ylim=c(0,1))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="black")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="right", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","black","red","green","yellow","orange"), cex=0.5)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(0,1), ylim=c(0,1))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="black")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="right", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","black","red","green","yellow","orange"), cex=0.5)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(0,1), ylim=c(0,1))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="black")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="right", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","black","red","green","yellow","orange"), cex=0.8)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(0,1), ylim=c(0,1))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="black")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="right", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","black","orange","red","green","yellow"), cex=0.8)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(0,1), ylim=c(0,1))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="pink")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="right", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","pink","orange","red","green","yellow"), cex=0.8)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type= 'l', xlim=c(0,1), ylim=c(0,1))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="purple")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="right", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","purple","orange","red","green","yellow"), cex=0.8)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type = 'l', xlim=c(1,0), ylim=c(0,1))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="purple")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="right", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","purple","orange","red","green","yellow"), cex=0.8)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type = 'l', xlim=c(1,0), ylim=c(0,1))
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="purple")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="left", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","purple","orange","red","green","yellow"), cex=0.8)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type = 'l', xlim=c(1,0), ylim=c(0,1), xlab="hola")
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="purple")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="left", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","purple","orange","red","green","yellow"), cex=0.8)
plot(roc_glm$f1_baratas,roc_glm$f1_caras, col="blue", type = 'l', xlim=c(1,0), ylim=c(0,1), xlab="F1-baratas", ylab="F1-caras")
lines(roc_gam$f1_baratas, roc_gam$f1_caras, col="purple")
lines(roc_knn$f1_baratas,roc_knn$f1_caras, col="orange")
lines(roc_dt$f1_baratas,roc_dt$f1_caras, col="red")
lines(roc_rf$f1_baratas,roc_rf$f1_caras,col="green")
lines(roc_svm$f1_baratas,roc_svm$f1_caras, col="yellow")
legend(x="left", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","purple","orange","red","green","yellow"), cex=0.8)
set.seed(1234)
# REGRESIÓN LOGÍSTICA
predictions_glm <- predict(model_glm, newdata = datos_train_rl, type = "response")
pred_glm <- prediction(predictions_glm, datos_train_rl$price_categ1)
perf_glm <- performance(pred_glm,"spec","sens")
# GAM
predictions_gam <- predict( model_gam_categ, type = "response")
predictions_gam <- as.data.frame(predictions_gam)
pred_gam <- prediction(predictions_gam, datos_train_limpio$price_categ1)
perf_gam <- performance(pred_gam,"spec","sens")
# KNN
predictions_Knn <- knn(scale(datos_train_numeric), scale(datos_train_numeric), cl=datos_train_limpio$price_categ1, k=14, prob = TRUE)
pred_knn <- prediction(attr(predictions_Knn,"prob"), datos_train_limpio$price_categ1)
perf_knn <- performance(pred_knn,"spec","sens")
# ARBOL DE DECISION
predictions_tree <- predict(decisiontree_model, newdata = datos_decision_tree, type = "prob")
pred_tree = prediction(predictions_tree[,2], datos_decision_tree$price_categ1)
perf_tree = performance(pred_tree,"spec","sens")
# RANDOM FOREST
predictions_rf <- predict(randomforest_model, new_data=datos_train_limpio, type = "prob")
pred_rf <- prediction(predictions_rf[,2],datos_train_limpio$price_categ1)
perf_rf <- performance(pred_rf,"spec","sens")
# SVM
predictions_svm <- predict(modelo_svm, newdata=datos_train_limpio, probability = TRUE)
prob_svm<-attr(predictions_svm,"probabilities")
pred_svm <- prediction(prob_svm[,2], datos_train_limpio$price_categ)
perf_svm <- performance(pred_svm,"spec","sens")
plot(perf_glm,col="blue", xlim=c(1,0))
plot(perf_gam,col="black", add = TRUE)
plot(perf_tree, col="red",add = TRUE)
plot(perf_rf,col="green", add = TRUE)
plot(perf_svm, col="yellow",add = TRUE)
plot(perf_knn, col="orange",add = TRUE)
legend(x="right", legend=c("GLM","GAM","DT","RF","SVM","KNN"), fill=c("blue","black","red","green","yellow","orange"), cex=0.8)
set.seed(1234)
# REGRESIÓN LOGÍSTICA
predictions_glm <- predict(model_glm, newdata = datos_train_rl, type = "response")
pred_glm <- prediction(predictions_glm, datos_train_rl$price_categ1)
perf_glm <- performance(pred_glm,"spec","sens")
# GAM
predictions_gam <- predict( model_gam_categ, type = "response")
predictions_gam <- as.data.frame(predictions_gam)
pred_gam <- prediction(predictions_gam, datos_train_limpio$price_categ1)
perf_gam <- performance(pred_gam,"spec","sens")
# KNN
predictions_Knn <- knn(scale(datos_train_numeric), scale(datos_train_numeric), cl=datos_train_limpio$price_categ1, k=14, prob = TRUE)
pred_knn <- prediction(attr(predictions_Knn,"prob"), datos_train_limpio$price_categ1)
perf_knn <- performance(pred_knn,"spec","sens")
# ARBOL DE DECISION
predictions_tree <- predict(decisiontree_model, newdata = datos_decision_tree, type = "prob")
pred_tree = prediction(predictions_tree[,2], datos_decision_tree$price_categ1)
perf_tree = performance(pred_tree,"spec","sens")
# RANDOM FOREST
predictions_rf <- predict(randomforest_model, new_data=datos_train_limpio, type = "prob")
pred_rf <- prediction(predictions_rf[,2],datos_train_limpio$price_categ1)
perf_rf <- performance(pred_rf,"spec","sens")
# SVM
predictions_svm <- predict(modelo_svm, newdata=datos_train_limpio, probability = TRUE)
prob_svm<-attr(predictions_svm,"probabilities")
pred_svm <- prediction(prob_svm[,2], datos_train_limpio$price_categ)
perf_svm <- performance(pred_svm,"spec","sens")
plot(perf_glm,col="blue", xlim=c(1,0))
plot(perf_gam,col="purple", add = TRUE)
plot(perf_knn, col="orange",add = TRUE)
plot(perf_tree, col="red",add = TRUE)
plot(perf_rf,col="green", add = TRUE)
plot(perf_svm, col="yellow",add = TRUE)
legend(x="right", legend=c("GLM","GAM","KNN","DT","RF","SVM"), fill=c("blue","purple","orange","red","green","yellow"), cex=0.8)
0.8919936-0.890931
0.8734-0.862
0.8824-0.8754
View(knn_1)
summary(knn_1)
summary(knn_2)
View(knn_2)
datos <- read.csv("kc_house_data.csv")
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(dplyr)
library(VIM)
library(mice)
library(DMwR2)
library(knitr)
library(kableExtra)
library(htmltools)
library(bsplus)
library(RColorBrewer)
library(GGally)
library(ggplot2)
library(corrplot)
library(vcd)
library(DT)
library(gridExtra)
library(jpeg)
library(car)
library(leaflet)
library(scales)
library(cowplot)
library(useful)
library(rpart)
library(rattle)
library(class)
library(cluster)
library(rpart)
library(rpart.plot)
library(rattle)
library(caret)
library(randomForest)
library(e1071)
library(mgcv)
library(StatMatch)
library(visreg)
library(ROCR)
library(kknn)
#Categorizamos la variable respuesta price:
quantile(datos$price, prob=seq(0, 1, length = 5))
datos$price_categ1 <- cut(datos$price, breaks = c(0, 500000, 100000000), labels = c("B1", "C1"))
table(datos$price_categ1)
datos$price_categ2 <- cut(datos$price, breaks = c(0, 330000, 650000, 100000000), labels = c("B2","M2", "C2"))
table(datos$price_categ2)
center_lon = median(datos$long,na.rm = TRUE)
center_lat = median(datos$lat,na.rm = TRUE)
factpal2 <- colorFactor(c("green","red"),
datos$price_categ1 )
leaflet(datos) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~long, lat = ~lat,
color = ~factpal2(datos$price_categ1))  %>%
# controls
setView(lng=center_lon, lat=center_lat, zoom = 9) %>%
addLegend("bottomright", pal = factpal2 , values = ~datos$price_categ1,
title = "Tipos de Casas",
opacity = 1)
center_lon = median(datos$long,na.rm = TRUE)
center_lat = median(datos$lat,na.rm = TRUE)
factpal2 <- colorFactor(c("green","red","yellow"),
datos$price_categ2 )
leaflet(datos) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~long, lat = ~lat,
color = ~factpal2(datos$price_categ2))  %>%
# controls
setView(lng=center_lon, lat=center_lat,zoom = 9) %>%
addLegend("bottomright", pal = factpal2 , values = ~datos$price_categ2,
title = "Tipos de Casas 3 categorías",
opacity = 1)
datos$price_categ2= NULL
num_total=nrow(datos)
set.seed(122556) #reproductividad
# 70% para train
indices_train = sample(1:num_total, .7*num_total)
datos_train = datos[indices_train,]
# 15% para test
indices=seq(1:num_total)
indices_test=indices[-indices_train]
indices_test1 = sample(indices_test, .15*num_total)
datos_test = datos[indices_test1,]
# 15% para validacion
indices_validacion=indices[c(-indices_train,-indices_test1)]
datos_validacion=datos[indices_validacion,]
datos_train <- datos_train[,-2]
datos_train$id <- as.factor(datos_train$id)
datos_train$bathrooms_group <- cut(datos_train$bathrooms,breaks = c(-1,0.25,1,2,3,4,5,6,7,8),labels=c(0,1,2,3,4,5,6,7,8))
datos_train$bathrooms_group <- as.numeric(as.character(datos_train$bathrooms_group))
datos_train$log_sqft_living <- log10(datos_train$sqft_living)
datos_train$log_lot <- log10(datos_train$sqft_lot)
datos_train$log_above <- log10(datos_train$sqft_above)
datos_train$sqft_basement_cat <- cut(datos_train$sqft_basement,breaks = c(-1,0,6000),labels=c(0,1))
datos_train$waterfront<-as.factor(datos_train$waterfront)
datos_train$view<-as.factor(datos_train$view)
datos_train$condition<-as.factor(datos_train$condition)
datos_train$grade_categ <- cut(datos_train$grade, breaks = c(0,4,9,13), labels = c(0,1,2))
datos_train$yr_renovated_catg <-cut(datos_train$yr_renovated, breaks=c(-0.5,1933, 2015), labels= c("0","1"))
datos_train$zipcode<-as.factor(datos_train$zipcode)
# Eliminación de Outliers
datos_train$posicion<-c(1:nrow(datos_train))
indices_cero_habitaciones<-datos_train[datos_train$bedrooms==0,]$posicion
datos_train<-datos_train[-indices_cero_habitaciones,]
datos_train$posicion<-c(1:nrow(datos_train))
indices_cero_banos<-datos_train$posicion[datos_train$bathrooms_group==0]
datos_train<-datos_train[-indices_cero_banos,]
datos_train$posicion<-c(1:nrow(datos_train))
indice_hab33 <- datos_train[datos_train$bedrooms==33,]$posicion
datos_train[datos_train$posicion == indice_hab33,]$bedrooms = 3
set.seed(1234)
model_selec_zipcode<-rpart(price_categ1~zipcode,data=datos_train ,parms=list(split="gini"))
print(model_selec_zipcode)
datos_train$zona<-recode(datos_train$zipcode, "98001=1; 98002=1; 98003=1; 98010=1; 98011=1; 98014=1; 98019=1; 98022=1; 98023=1; 98024=1; 98028=1; 98030=1; 98031=1; 98032=1; 98034=1; 98038=1; 98042=1; 98045=1; 98055=1; 98056=1; 98058=1; 98059=1; 98070=1; 98092=1 ;98106=1; 98108=1; 98118=1; 98125=1; 98126=1; 98133=1; 98144=1; 98146=1; 98148=1; 98155=1; 98166=1; 98168=1; 98178=1; 98188=1; 98198=1; 98004=2; 98005=2; 98006=2; 98007=2; 98008=2; 98027=2; 98029=2; 98033=2; 98039=2; 98040=2; 98052=2; 98053=2; 98065=2; 98072=2; 98074=2; 98075=2; 98077=2; 98102=2; 98103=2; 98105=2; 98107=2; 98109=2; 98112=2; 98115=2; 98116=2; 98117=2; 98119=2; 98122=2; 98136=2; 98177=2; 98199=2")
datos_train$zipcode = NULL
set.seed(1234)
model_selec_bathrooms<-rpart(price_categ1~bathrooms_group,data=datos_train ,parms=list(split="gini"))
print(model_selec_bathrooms)
fancyRpartPlot(model_selec_bathrooms, caption='')
datos_train$bathrooms_group <- cut(datos_train$bathrooms_group, breaks = c(-1,2.5,8),labels=c(0,1))
# Limpiamos el dataframe:
datos_train_limpio <- datos_train[c(3,21:25,8:10,26,16,17,29,27,20)]
#Eliminamos sqft_above:
datos_train_limpio$log_above = NULL
datos_train_numeric <- datos_train_limpio %>% select_if(is.numeric)
datos_test <- datos_test[,-2]
datos_test$id <- as.factor(datos_test$id)
datos_test$bathrooms_group <- cut(datos_test$bathrooms,breaks = c(-1,0.25,1,2,3,4,5,6,7,8),labels=c(0,1,2,3,4,5,6,7,8))
datos_test$bathrooms_group <- as.numeric(as.character(datos_test$bathrooms_group))
datos_test$log_sqft_living <- log10(datos_test$sqft_living)
datos_test$log_lot <- log10(datos_test$sqft_lot)
datos_test$log_above <- log10(datos_test$sqft_above)
datos_test$sqft_basement_cat <- cut(datos_test$sqft_basement,breaks = c(-1,0,6000),labels=c(0,1))
datos_test$waterfront<-as.factor(datos_test$waterfront)
datos_test$view<-as.factor(datos_test$view)
datos_test$condition<-as.factor(datos_test$condition)
datos_test$grade_categ <- cut(datos_test$grade, breaks = c(0,4,9,13), labels = c(0,1,2))
datos_test$yr_renovated_catg <-cut(datos_test$yr_renovated, breaks=c(-0.5,1933, 2015), labels= c("0","1"))
datos_test$zipcode<-as.factor(datos_test$zipcode)
#codificar la variable Zipcode
datos_test$zona<-recode(datos_test$zipcode, " 98001=1; 98002=1; 98003=1; 98010=1; 98011=1; 98014=1; 98019=1; 98022=1; 98023=1; 98024=1; 98028=1; 98030=1; 98031=1; 98032=1; 98034=1; 98038=1; 98042=1; 98045=1; 98055=1; 98056=1; 98058=1; 98059=1; 98070=1; 98092=1 ;98106=1; 98108=1; 98118=1; 98125=1; 98126=1; 98133=1; 98144=1; 98146=1; 98148=1; 98155=1; 98166=1; 98168=1; 98178=1; 98188=1; 98198=1; 98004=2; 98005=2; 98006=2; 98007=2; 98008=2; 98027=2; 98029=2; 98033=2; 98039=2; 98040=2; 98052=2; 98053=2; 98065=2; 98072=2; 98074=2; 98075=2; 98077=2; 98102=2; 98103=2; 98105=2; 98107=2; 98109=2; 98112=2; 98115=2; 98116=2; 98117=2; 98119=2; 98122=2; 98136=2; 98177=2; 98199=2")
datos_test$zipcode = NULL
datos_test$bathrooms_group <- cut(datos_test$bathrooms_group, breaks = c(-1,2.5,8),labels=c(0,1))
datos_test_limpio <- datos_test[c(3,21:25,8:10,26,16,17,28,27,20)]
datos_test_limpio$log_above = NULL
datos_test_numeric <- datos_test_limpio %>% select_if(is.numeric)
datos_validacion <- datos_validacion[,-2]
datos_validacion$id <- as.factor(datos_validacion$id)
datos_validacion$bathrooms_group <- cut(datos_validacion$bathrooms,breaks = c(-1,0.25,1,2,3,4,5,6,7,8),labels=c(0,1,2,3,4,5,6,7,8))
datos_validacion$bathrooms_group <- as.numeric(as.character(datos_validacion$bathrooms_group))
datos_validacion$log_sqft_living <- log10(datos_validacion$sqft_living)
datos_validacion$log_lot <- log10(datos_validacion$sqft_lot)
datos_validacion$log_above <- log10(datos_validacion$sqft_above)
datos_validacion$sqft_basement_cat <- cut(datos_validacion$sqft_basement,breaks = c(-1,0,6000),labels=c(0,1))
datos_validacion$waterfront<-as.factor(datos_validacion$waterfront)
datos_validacion$view<-as.factor(datos_validacion$view)
datos_validacion$condition<-as.factor(datos_validacion$condition)
datos_validacion$grade_categ <- cut(datos_validacion$grade, breaks = c(0,4,9,13), labels = c(0,1,2))
datos_validacion$yr_renovated_catg <-cut(datos_validacion$yr_renovated, breaks=c(-0.5,1933, 2015), labels= c("0","1"))
datos_validacion$zipcode<-as.factor(datos_validacion$zipcode)
#codificar la variable Zipcode
datos_validacion$zona<-recode(datos_validacion$zipcode, " 98001=1; 98002=1; 98003=1; 98010=1; 98011=1; 98014=1; 98019=1; 98022=1; 98023=1; 98024=1; 98028=1; 98030=1; 98031=1; 98032=1; 98034=1; 98038=1; 98042=1; 98045=1; 98055=1; 98056=1; 98058=1; 98059=1; 98070=1; 98092=1 ;98106=1; 98108=1; 98118=1; 98125=1; 98126=1; 98133=1; 98144=1; 98146=1; 98148=1; 98155=1; 98166=1; 98168=1; 98178=1; 98188=1; 98198=1; 98004=2; 98005=2; 98006=2; 98007=2; 98008=2; 98027=2; 98029=2; 98033=2; 98039=2; 98040=2; 98052=2; 98053=2; 98065=2; 98072=2; 98074=2; 98075=2; 98077=2; 98102=2; 98103=2; 98105=2; 98107=2; 98109=2; 98112=2; 98115=2; 98116=2; 98117=2; 98119=2; 98122=2; 98136=2; 98177=2; 98199=2")
datos_validacion$zipcode = NULL
datos_validacion$bathrooms_group <- cut(datos_validacion$bathrooms_group, breaks = c(-1,2.5,8),labels=c(0,1))
datos_validacion_limpio <- datos_validacion[c(3,21:25,8:10,26,16,17,28,27,20)]
datos_validacion_limpio$log_above = NULL
datos_validacion_numeric <- datos_validacion_limpio %>% select_if(is.numeric)
datos_train_limpio %>%
group_by(price_categ1) %>%
summarise(Count = n())%>%
mutate(percent = prop.table(Count)*100)%>%
ggplot(aes(reorder(price_categ1, - percent), percent), fill = price_categ1) +
geom_col(fill = c("salmon", "cyan3"), size = 0.5) +
xlab("Precio de las casas") +
ylab("Porcentaje") +
ggtitle("Porcentaje de casas por precio") +
theme(plot.title = element_text(hjust = 0.5))
p1<-ggplot(data = datos_train_limpio)+
geom_bar(aes(x=bedrooms,fill=price_categ1,bins=30, position = "identity"))
p2<-ggplot(data=datos_train_limpio)+
geom_bar(aes(x=bathrooms_group,fill = price_categ1))
p3<-ggplot(data=datos_train_limpio)+
geom_density(aes(x=log_sqft_living, fill=price_categ1))
p4<-ggplot(data=datos_train_limpio)+
geom_density(aes(x=log_lot, fill=price_categ1))+
facet_grid(price_categ1~., scales = 'free')
grid.arrange(p1, p2, p3, p4, nrow = 2)
p5<-ggplot(data = datos_train_limpio) + geom_bar(aes(x=waterfront,fill=price_categ1, stat="count"))
p6<-ggplot(data = datos_train_limpio) + geom_bar(aes(x=view,fill=price_categ1, stat="count"))
p7<-ggplot(data = datos_train_limpio) + geom_bar(aes(x=condition,fill=price_categ1, stat="count"))
p8<-ggplot(data = datos_train_limpio) + geom_bar(aes(x=grade_categ,fill=price_categ1, stat="count"))
p9<-ggplot(data = datos_train_limpio) + geom_bar(aes(x=yr_renovated_catg,fill=price_categ1, stat="count"))
p10<-ggplot(data = datos_train_limpio) + geom_bar(aes(x=zona,fill=price_categ1,bins=30, position = "identity"))
grid.arrange(p5,p6,p7,p8,p9,p10, nrow = 3)
datospca<-datos_train_numeric
pca<-prcomp(datospca,scale=T)
plot(pca, main = 'Análisis de componentes principales', xlab= 'Componente')
summary(pca)
pca$rotation
biplot(x = pca, scale = 0, cex = 0.6, col = c("blue4", "brown3"))
datos_scale<- as.data.frame(scale(datos_train_numeric))
matriz_dist=dist(datos_scale)
set.seed(1234)
modelo_hc1= hclust(matriz_dist, method = "average")
plot(modelo_hc1, sub='')
rect.hclust(modelo_hc1, k=2, border="red")
set.seed(1234)
modelo_hc2= hclust(matriz_dist, method = "average")
plot(modelo_hc2, sub='')
rect.hclust(modelo_hc2, k=10, border="red")
grupos2=cutree(modelo_hc1,k=2)
table(datos_train_limpio$price_categ1, grupos2)
grupos10=cutree(modelo_hc2,k=10)
table(datos_train_limpio$price_categ1, grupos10)
colores1= c("red","blue")
colores11 = colores1[datos_train_limpio$price_categ1]
plot(prcomp(datos_train_numeric, scale = T)$x[,1:2], type="n",main= "Dos categorías")
text(prcomp(datos_train_numeric, scale = T)$x[,1:2], as.character(datos_train_limpio$price_categ1), col=colores11)
set.seed(1234)
model_km <- kmeans(matriz_dist, centers=2)
colores1= c("red","blue")
colores11 = colores1[datos_train_limpio$price_categ1]
plot(prcomp(datos_train_numeric, scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_numeric, scale = T)$x[,1:2], as.character(model_km$cluster), col=colores11)
set.seed(1234)
wcss <- vector()
for(i in 1:20){
wcss[i] <- sum(kmeans(datos_scale, i)$withinss)
}
ggplot() + geom_point(aes(x = 1:20, y = wcss), color = 'blue') +
geom_line(aes(x = 1:20, y = wcss), color = 'blue') +
ggtitle("Método del Codo") +
xlab('Cantidad de Centroides k') +
ylab('WCSS')
load("model_km10.RData")
table(model_km$cluster, datos_train_limpio$price_categ1) #asignación de observación a los cluster
table(model_km10$cluster, datos_train_limpio$price_categ1)
aggregate(datos_train_numeric[,-c(4,5)],by=list(model_km$cluster), mean)
aggregate(datos_train_numeric[,-c(4,5)],by=list(model_km10$cluster), mean)
par(mfrow=c(1,2))
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km$cluster, xlab="latitud", ylab="longitud")+
title('Dos clústers')
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km10$cluster, xlab="latitud", ylab="longitud")+
title('Diez clústers')
par(mfrow=c(1,2))
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km$cluster, xlab="latitud", ylab="longitud")+
title('Dos clústers')
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km10$cluster, xlab="latitud", ylab="longitud")+title('Diez clústers')
par(mfrow=c(1,2));
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km$cluster, xlab="latitud", ylab="longitud")+
title('Dos clústers')
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km10$cluster, xlab="latitud", ylab="longitud")+title('Diez clústers')
par(mfrow=c(1,2));
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km$cluster, xlab="latitud", ylab="longitud")+
title('Dos clústers');
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km10$cluster, xlab="latitud", ylab="longitud")+title('Diez clústers');
par(mfrow=c(1,2))
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km$cluster, xlab="latitud", ylab="longitud", title=('Dos clústers'))
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km10$cluster, xlab="latitud", ylab="longitud")+title('Diez clústers')
par(mfrow=c(1,2))
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km$cluster, xlab="latitud", ylab="longitud")
# title=('Dos clústers'))
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km10$cluster, xlab="latitud", ylab="longitud")+title('Diez clústers')
par(mfrow=c(1,2))
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km$cluster, xlab="latitud", ylab="longitud")
# title=('Dos clústers'))
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km10$cluster, xlab="latitud", ylab="longitud")
par(mfrow=c(1,2))
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km$cluster, xlab="latitud", ylab="longitud")
+ main=('Dos clústers')
par(mfrow=c(1,2))
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km$cluster, xlab="latitud", ylab="longitud",  main=('Dos clústers'))
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km10$cluster, xlab="latitud", ylab="longitud")
par(mfrow=c(1,2))
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km$cluster, xlab="latitud", ylab="longitud",  main='Dos clústers')
plot(x=datos_train_numeric$long, y=datos_train_numeric$lat, col=model_km10$cluster, xlab="latitud", ylab="longitud", main="Diez clústers")
