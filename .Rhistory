library(rpart.plot)
library(rattle)
library(caret)
library(randomForest)
library(e1071)
library(mgcv)
library(StatMatch)
library(visreg)
library(ROCR)
#Categorizamos la variable respuesta price:
quantile(datos$price, prob=seq(0, 1, length = 5))
datos$price_categ1 <- cut(datos$price, breaks = c(0, 500000, 100000000), labels = c("B1", "C1"))
table(datos$price_categ1)
datos$price_categ2 <- cut(datos$price, breaks = c(0, 330000, 650000, 100000000), labels = c("B2","M2", "C2"))
table(datos$price_categ2)
center_lon = median(datos$long,na.rm = TRUE)
center_lat = median(datos$lat,na.rm = TRUE)
factpal2 <- colorFactor(c("green","red"),
datos$price_categ1 )
leaflet(datos) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~long, lat = ~lat,
color = ~factpal2(datos$price_categ1))  %>%
# controls
setView(lng=center_lon, lat=center_lat,zoom = 12) %>%
addLegend("bottomright", pal = factpal2 , values = ~datos$price_categ1,
title = "Tipos de Casas",
opacity = 1)
center_lon = median(datos$long,na.rm = TRUE)
center_lat = median(datos$lat,na.rm = TRUE)
factpal2 <- colorFactor(c("green","red","yellow"),
datos$price_categ2 )
leaflet(datos) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~long, lat = ~lat,
color = ~factpal2(datos$price_categ2))  %>%
# controls
setView(lng=center_lon, lat=center_lat,zoom = 12) %>%
addLegend("bottomright", pal = factpal2 , values = ~datos$price_categ2,
title = "Tipos de Casas 3 categorías",
opacity = 1)
num_total=nrow(datos)
set.seed(122556) #reproductividad
# 70% para train
indices_train = sample(1:num_total, .7*num_total)
datos_train = datos[indices_train,]
# 15% para test
indices=seq(1:num_total)
indices_test=indices[-indices_train]
indices_test1 = sample(indices_test, .15*num_total)
datos_test = datos[indices_test1,]
# 15% para validacion
indices_validacion=indices[c(-indices_train,-indices_test1)]
datos_validacion=datos[indices_validacion,]
datos_train <- datos_train[,-2]
datos_train$id <- as.factor(datos_train$id)
datos_train$bathrooms_group <- cut(datos_train$bathrooms,breaks = c(-1,0.25,1,2,3,4,5,6,7,8),labels=c(0,1,2,3,4,5,6,7,8))
datos_train$bathrooms_group <- as.numeric(as.character(datos_train$bathrooms_group))
datos_train$log_sqft_living <- log10(datos_train$sqft_living)
datos_train$log_lot <- log10(datos_train$sqft_lot)
datos_train$log_above <- log10(datos_train$sqft_above)
datos_train$sqft_basement_cat <- cut(datos_train$sqft_basement,breaks = c(-1,0,6000),labels=c(0,1))
datos_train$waterfront<-as.factor(datos_train$waterfront)
datos_train$view<-as.factor(datos_train$view)
datos_train$condition<-as.factor(datos_train$condition)
datos_train$grade_categ <- cut(datos_train$grade, breaks = c(0,4,9,13), labels = c(0,1,2))
datos_train$yr_renovated_catg <-cut(datos_train$yr_renovated, breaks=c(-0.5,1933, 2015), labels= c("0","1"))
datos_train$zipcode<-as.factor(datos_train$zipcode)
datos_train$posicion<-c(1:nrow(datos_train))
indices_cero_habitaciones<-datos_train[datos_train$bedrooms==0,]$posicion
datos_train<-datos_train[-indices_cero_habitaciones,]
datos_train$posicion<-c(1:nrow(datos_train))
indices_cero_banos<-datos_train$posicion[datos_train$bathrooms_group==0]
datos_train<-datos_train[-indices_cero_banos,]
datos_train$posicion<-c(1:nrow(datos_train))
indice_hab33 <- datos_train[datos_train$bedrooms==33,]$posicion
datos_train[datos_train$posicion == indice_hab33,]$bedrooms = 3
model_selec_zipcode<-rpart(price_categ1~zipcode,data=datos_train ,parms=list(split="gini"))
print(model_selec_zipcode)
datos_train$zona<-recode(datos_train$zipcode, "98001=1; 98002=1; 98003=1; 98010=1; 98011=1; 98014=1; 98019=1; 98022=1; 98023=1; 98024=1; 98028=1; 98030=1; 98031=1; 98032=1; 98034=1; 98038=1; 98042=1; 98045=1; 98055=1; 98056=1; 98058=1; 98059=1; 98070=1; 98092=1 ;98106=1; 98108=1; 98118=1; 98125=1; 98126=1; 98133=1; 98144=1; 98146=1; 98148=1; 98155=1; 98166=1; 98168=1; 98178=1; 98188=1; 98198=1; 98004=2; 98005=2; 98006=2; 98007=2; 98008=2; 98027=2; 98029=2; 98033=2; 98039=2; 98040=2; 98052=2; 98053=2; 98065=2; 98072=2; 98074=2; 98075=2; 98077=2; 98102=2; 98103=2; 98105=2; 98107=2; 98109=2; 98112=2; 98115=2; 98116=2; 98117=2; 98119=2; 98122=2; 98136=2; 98177=2; 98199=2")
datos_train$zipcode = NULL
model_selec_bathrooms<-rpart(price_categ1~bathrooms_group,data=datos_train ,parms=list(split="gini"))
print(model_selec_bathrooms)
datos_train$bathrooms_group <- cut(datos_train$bathrooms_group, breaks = c(-1,2.5,8),labels=c(0,1))
#0: 1 ó 2 baños; 1: + de 3 baños.
# Limpiamos el dataframe
datos_train_limpio <- datos_train[c(3,22:26,8:10,27,16,17,30,28,20,21)]
#Eliminamos sqft_above porque es una combinalción lineal de sqft_living, están altamente correladas........
datos_train_limpio$log_above = NULL
datos_train_numeric <- datos_train_limpio %>% select_if(is.numeric)
datos_test <- datos_test[,-2]
datos_test$id <- as.factor(datos_test$id)
datos_test$bathrooms_group <- cut(datos_test$bathrooms,breaks = c(-1,0.25,1,2,3,4,5,6,7,8),labels=c(0,1,2,3,4,5,6,7,8))
datos_test$bathrooms_group <- as.numeric(as.character(datos_test$bathrooms_group))
datos_test$log_sqft_living <- log10(datos_test$sqft_living)
datos_test$log_lot <- log10(datos_test$sqft_lot)
datos_test$log_above <- log10(datos_test$sqft_above)
datos_test$sqft_basement_cat <- cut(datos_test$sqft_basement,breaks = c(-1,0,6000),labels=c(0,1))
datos_test$waterfront<-as.factor(datos_test$waterfront)
datos_test$view<-as.factor(datos_test$view)
datos_test$condition<-as.factor(datos_test$condition)
datos_test$grade_categ <- cut(datos_test$grade, breaks = c(0,4,9,13), labels = c(0,1,2))
datos_test$yr_renovated_catg <-cut(datos_test$yr_renovated, breaks=c(-0.5,1933, 2015), labels= c("0","1"))
datos_test$zipcode<-as.factor(datos_test$zipcode)
#codificar la variable Zipcode
datos_test$zona<-recode(datos_test$zipcode, " 98001=1; 98002=1; 98003=1; 98010=1; 98011=1; 98014=1; 98019=1; 98022=1; 98023=1; 98024=1; 98028=1; 98030=1; 98031=1; 98032=1; 98034=1; 98038=1; 98042=1; 98045=1; 98055=1; 98056=1; 98058=1; 98059=1; 98070=1; 98092=1 ;98106=1; 98108=1; 98118=1; 98125=1; 98126=1; 98133=1; 98144=1; 98146=1; 98148=1; 98155=1; 98166=1; 98168=1; 98178=1; 98188=1; 98198=1; 98004=2; 98005=2; 98006=2; 98007=2; 98008=2; 98027=2; 98029=2; 98033=2; 98039=2; 98040=2; 98052=2; 98053=2; 98065=2; 98072=2; 98074=2; 98075=2; 98077=2; 98102=2; 98103=2; 98105=2; 98107=2; 98109=2; 98112=2; 98115=2; 98116=2; 98117=2; 98119=2; 98122=2; 98136=2; 98177=2; 98199=2")
datos_test$zipcode = NULL
datos_test$bathrooms_group <- cut(datos_test$bathrooms_group, breaks = c(-1,2.5,8),labels=c(0,1))
#0 1ó 2 baños, 1 de 3 baños en adelante
datos_test_limpio <- datos_test[c(3,22:26,8:10,27,16,17,29,28,20,21)]
datos_test_limpio$log_above = NULL
datos_test_numeric <- datos_test_limpio %>% select_if(is.numeric)
datos_validacion <- datos_validacion[,-2]
datos_validacion$id <- as.factor(datos_validacion$id)
datos_validacion$bathrooms_group <- cut(datos_validacion$bathrooms,breaks = c(-1,0.25,1,2,3,4,5,6,7,8),labels=c(0,1,2,3,4,5,6,7,8))
datos_validacion$bathrooms_group <- as.numeric(as.character(datos_validacion$bathrooms_group))
datos_validacion$log_sqft_living <- log10(datos_validacion$sqft_living)
datos_validacion$log_lot <- log10(datos_validacion$sqft_lot)
datos_validacion$log_above <- log10(datos_validacion$sqft_above)
datos_validacion$sqft_basement_cat <- cut(datos_validacion$sqft_basement,breaks = c(-1,0,6000),labels=c(0,1))
datos_validacion$waterfront<-as.factor(datos_validacion$waterfront)
datos_validacion$view<-as.factor(datos_validacion$view)
datos_validacion$condition<-as.factor(datos_validacion$condition)
datos_validacion$grade_categ <- cut(datos_validacion$grade, breaks = c(0,4,9,13), labels = c(0,1,2))
datos_validacion$yr_renovated_catg <-cut(datos_validacion$yr_renovated, breaks=c(-0.5,1933, 2015), labels= c("0","1"))
datos_validacion$zipcode<-as.factor(datos_validacion$zipcode)
#codificar la variable Zipcode
datos_validacion$zona<-recode(datos_validacion$zipcode, " 98001=1; 98002=1; 98003=1; 98010=1; 98011=1; 98014=1; 98019=1; 98022=1; 98023=1; 98024=1; 98028=1; 98030=1; 98031=1; 98032=1; 98034=1; 98038=1; 98042=1; 98045=1; 98055=1; 98056=1; 98058=1; 98059=1; 98070=1; 98092=1 ;98106=1; 98108=1; 98118=1; 98125=1; 98126=1; 98133=1; 98144=1; 98146=1; 98148=1; 98155=1; 98166=1; 98168=1; 98178=1; 98188=1; 98198=1; 98004=2; 98005=2; 98006=2; 98007=2; 98008=2; 98027=2; 98029=2; 98033=2; 98039=2; 98040=2; 98052=2; 98053=2; 98065=2; 98072=2; 98074=2; 98075=2; 98077=2; 98102=2; 98103=2; 98105=2; 98107=2; 98109=2; 98112=2; 98115=2; 98116=2; 98117=2; 98119=2; 98122=2; 98136=2; 98177=2; 98199=2")
datos_validacion$zipcode = NULL
datos_validacion$bathrooms_group <- cut(datos_validacion$bathrooms_group, breaks = c(-1,2.5,8),labels=c(0,1))
datos_validacion_limpio <- datos_validacion[c(3,22:26,8:10,27,16,17,29,28,20,21)]
datos_validacion_limpio$log_above = NULL
datos_validacion_numeric <- datos_validacion_limpio %>% select_if(is.numeric)
#Aquí nos cargamos ya price_categ2
datos_train_limpio$price_categ2= NULL
datos_test_limpio$price_categ2= NULL
datos_validacion_limpio$price_categ2 = NULL
datos_scale<- as.data.frame(scale(datos_train_numeric))
#Matriz de distancias
matriz_dist=dist(datos_scale)
modelo_hc= hclust(matriz_dist, method = "average")
plot(modelo_hc)
rect.hclust(modelo_hc, k=2,border="red")
grupos2=cutree(modelo_hc,k=2)
table(datos_train_limpio$price_categ1, grupos2)
colores1= c("red","blue")
colores11 = colores1[datos_train_limpio$price_categ1]
plot(prcomp(datos_train_numeric, scale = T)$x[,1:2], type="n",main= "Dos categorías")
text(prcomp(datos_train_numeric, scale = T)$x[,1:2], as.character(datos_train_limpio$price_categ1), col=colores11)
set.seed(1234)
model_km <- kmeans(matriz_dist, centers=2)
table(model_km$cluster) #asignación de observación a los cluster
colores1= c("red","blue")
colores11 = colores1[datos_train_limpio$price_categ1]
plot(prcomp(datos_train_numeric, scale = T)$x[,1:2], type="n")
text(prcomp(datos_train_numeric, scale = T)$x[,1:2], as.character(model_km$cluster), col=colores11)
set.seed(1234)
wcss <- vector()
for(i in 1:20){
wcss[i] <- sum(kmeans(datos_scale, i)$withinss)
}
ggplot() + geom_point(aes(x = 1:20, y = wcss), color = 'blue') +
geom_line(aes(x = 1:20, y = wcss), color = 'blue') +
ggtitle("Método del Codo") +
xlab('Cantidad de Centroides k') +
ylab('WCSS')
clusterkmeans=as.data.frame(model_km$cluster)
clusterkmeans$indice= as.integer(rownames(clusterkmeans))
colnames(clusterkmeans)[1]= "categoria_price_km"
clustering1= clusterkmeans[order(clusterkmeans$indice),]
center_lon = median(datos_train_limpio$long,na.rm = TRUE)
center_lat = median(datos_train_limpio$lat,na.rm = TRUE)
factpal1 <- colorFactor(c("green","red"),
clustering1$categoria_price_km )
leaflet(datos_train_limpio) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~long, lat = ~lat,
color = ~factpal1(clustering1$categoria_price_km))  %>%
# controls
setView(lng=center_lon, lat=center_lat,zoom = 12) %>%
addLegend("bottomright", pal = factpal1 , values = ~clustering1$categoria_price_km,
title = "Tipos de casas",
opacity = 1)
datoskmedoids = datos_train_limpio[,-15]
model_medoids = pam(x = datoskmedoids, k = 2, keep.diss = TRUE, keep.data = TRUE)
model_medoids$medoids
grupos<-data.frame(datoskmedoids)
grupos<-cbind(grupos,data.frame(model_medoids$clustering))
grupos$model_medoids.clustering<-as.factor(grupos$model_medoids.clustering)
ggpairs(grupos,columns=c(1,2,3,15,12),mapping=aes(color=model_medoids.clustering))
table(grupos$model_medoids.clustering)
clustering= sort(model_medoids$clustering)
clustering=as.data.frame(model_medoids$clustering)
clustering$indice= as.integer(rownames(clustering))
colnames(clustering)[1]= "categoria_price"
clustering2= clustering[order(clustering$indice),]
center_lon = median(datoskmedoids$long,na.rm = TRUE)
center_lat = median(datoskmedoids$lat,na.rm = TRUE)
factpal2 <- colorFactor(c("green","red"),
clustering2$categoria_price )
leaflet(datoskmedoids) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~long, lat = ~lat,
color = ~factpal2(clustering2$categoria_price))  %>%
# controls
setView(lng=center_lon, lat=center_lat,zoom = 12) %>%
addLegend("bottomright", pal = factpal2 , values = ~clustering2$categoria_price,
title = "Tipos de casas",
opacity = 1)
pca<-prcomp(datos_train_numeric,scale=T)
plot(pca)
#pca$center para saber la media de cada variable
#pca$scale para saber la desv.típica de cada variable
pca$center # para saber la media de cada variable
pca$scale # para saber la desv.típica de cada variable
pca<-prcomp(datos_train_numeric,scale=T)
plot(pca)
pca$center # para saber la media de cada variable
pca$scale # para saber la desv.típica de cada variable
summary(prcomp(datos_train_numeric, scale=T))
biplot(x = pca, scale = 0, cex = 0.6, col = c("blue4", "brown3"))
summary(pca)
summary(pca)
biplot(x = pca, scale = 0, cex = 0.6, col = c("blue4", "brown3"))
View(datos_train)
View(datos_train_limpio)
datos_train_rl <- datos_train_limpio[,-c(8,9)] # quitamos condition y grade_categ (no aportan)
datos_train_rl$price_categ1<- recode(datos_train_rl$price_categ1, "'B1'=0; 'C1'=1")
model_glm = glm(price_categ1 ~., family = binomial, data =datos_train_rl )
summary(model_glm)
# EVALUACION
predicciones <- ifelse(test = model_glm$fitted.values > 0.5, yes = 1, no = 0)
tabla_reglog <- table(model_glm$model$price_categ1, predicciones,
dnn = c("observaciones", "predicciones"))
tabla_reglog
#caras
pred.means2=tabla_reglog[2,2]/(tabla_reglog[2,2]+tabla_reglog[1,2])
rec.means2=tabla_reglog[2,2]/(tabla_reglog[2,2]+tabla_reglog[2,1])
F_caras_reglog=(2*pred.means2*rec.means2)/(pred.means2+rec.means2)
F_caras_reglog
#baratas
pred.means2=tabla_reglog[1,1]/(tabla_reglog[1,1]+tabla_reglog[2,1])
rec.means2=tabla_reglog[1,1]/(tabla_reglog[1,1]+tabla_reglog[1,2])
F_baratas_reglog=(2*pred.means2*rec.means2)/(pred.means2+rec.means2)
F_baratas_reglog
#F-Medida
F_reglog_train= (F_caras_reglog+F_baratas_reglog)/2
F_reglog_train
accuracy_reglog_train = (tabla_reglog[1,1]+tabla_reglog[2,2]) / (tabla_reglog[1,1]+tabla_reglog[1,2]+tabla_reglog[2,1]+tabla_reglog[2,2])
accuracy_reglog_train
print('hola')
print('hoal' , F_caras_reglog)
println()
print('F1 cass caras: ')
F_caras_reglog
print('F1 cass caras: ')
F_caras_reglog
print('F1 cass caras: ' + F_caras_reglog)
print('F1 cass caras: %c ' + F_caras_reglog)
print(c('F1 cass caras: ', F_caras_reglog)
print(c('F1 cass caras: ', F_caras_reglog))
print(c('F1 cass caras: ', F_caras_reglog))
print(c('F1 cass caras: %c', F_caras_reglog))
cat(c('F1 cass caras: ', F_caras_reglog))
cat(c('F1 casas caras: ', F_caras_reglog), '\n')
# EVALUACION
predicciones <- ifelse(test = model_glm$fitted.values > 0.5, yes = 1, no = 0)
tabla_reglog <- table(model_glm$model$price_categ1, predicciones,
dnn = c("observaciones", "predicciones"))
tabla_reglog
#caras
pred.means2=tabla_reglog[2,2]/(tabla_reglog[2,2]+tabla_reglog[1,2])
rec.means2=tabla_reglog[2,2]/(tabla_reglog[2,2]+tabla_reglog[2,1])
F_caras_reglog=(2*pred.means2*rec.means2)/(pred.means2+rec.means2)
cat(c('F1 casas caras: ', F_caras_reglog), '\n')
#baratas
pred.means2=tabla_reglog[1,1]/(tabla_reglog[1,1]+tabla_reglog[2,1])
rec.means2=tabla_reglog[1,1]/(tabla_reglog[1,1]+tabla_reglog[1,2])
F_baratas_reglog=(2*pred.means2*rec.means2)/(pred.means2+rec.means2)
F_baratas_reglog
cat(c('F1 casas baratas: ', F_baratas_reglog), '\n')
#F-Medida
F_reglog_train= (F_caras_reglog+F_baratas_reglog)/2
cat(c('F1 global: ', F_reglog_train), '\n')
accuracy_reglog_train = (tabla_reglog[1,1]+tabla_reglog[2,2]) / (tabla_reglog[1,1]+tabla_reglog[1,2]+tabla_reglog[2,1]+tabla_reglog[2,2])
cat(c('Accuracy: ', accuracy_reglog_train), '\n')
# EVALUACION
predicciones <- ifelse(test = model_glm$fitted.values > 0.5, yes = 1, no = 0)
tabla_reglog <- table(model_glm$model$price_categ1, predicciones,
dnn = c("observaciones", "predicciones"))
tabla_reglog
#caras
pred.means2=tabla_reglog[2,2]/(tabla_reglog[2,2]+tabla_reglog[1,2])
rec.means2=tabla_reglog[2,2]/(tabla_reglog[2,2]+tabla_reglog[2,1])
F_caras_reglog=(2*pred.means2*rec.means2)/(pred.means2+rec.means2)
cat(c('F1 casas caras: ', F_caras_reglog), '\n')
#baratas
pred.means2=tabla_reglog[1,1]/(tabla_reglog[1,1]+tabla_reglog[2,1])
rec.means2=tabla_reglog[1,1]/(tabla_reglog[1,1]+tabla_reglog[1,2])
F_baratas_reglog=(2*pred.means2*rec.means2)/(pred.means2+rec.means2)
cat(c('F1 casas baratas: ', F_baratas_reglog), '\n')
#F-Medida
F_reglog_train= (F_caras_reglog+F_baratas_reglog)/2
cat(c('F1 global: ', F_reglog_train), '\n')
accuracy_reglog_train = (tabla_reglog[1,1]+tabla_reglog[2,2]) / (tabla_reglog[1,1]+tabla_reglog[1,2]+tabla_reglog[2,1]+tabla_reglog[2,2])
cat(c('Accuracy: ', accuracy_reglog_train), '\n')
ggplot(subset(datos_train_rl, select = c(bedrooms,bathrooms_group), aes(x = bathrooms_group,
y = price_categ1)) + geom_point() + geom_smooth(method = 'glm', method.args = list(family =
'binomial'), se=FALSE) + geom_line(data = data.frame(bathrooms_group = data.frame(bathrooms_group = seq(1,8,1)), price_categ1 = predict(model_glm, data.frame(bathrooms_group = seq(1,8,1)), type = "response")), colour = "navy")
ggplot(subset(datos_train_rl, select = c(bedrooms,bathrooms_group), aes(x = bathrooms_group, y = price_categ1)))
suppressWarnings(suppressMessages(library(kknn)))
modelo <- train.kknn(price_categ1 ~ ., data = datos_train_limpio, kmax = 20)
modelo
suppressWarnings(suppressMessages(library(kknn)))
model_knn_1 <- train.kknn(price_categ1 ~ ., data = datos_train_limpio, kmax = 20)
model_knn_1
suppressWarnings(suppressMessages(library(kknn)))
model_knn_1 <- train.kknn(price_categ1 ~ ., data = datos_train_limpio, kmax = 20)
model_knn_1
suppressWarnings(suppressMessages(library(kknn)))
knn_1 <- train.kknn(price_categ1 ~ ., data = datos_train_limpio, kmax = 20)
knn_1
knn_2 <- tune.knn(x=scale(datos_train_numeric),
y=as.factor(datos_train_limpio$price_categ1), k = 1:10,
tunecontrol = tune.control(sampling = "boot"))
summary(knn_2)
plot(knn_2)
knn_2 <- tune.knn(x=scale(datos_train_numeric),
y=as.factor(datos_train_limpio$price_categ1), k = 1:30,
tunecontrol = tune.control(sampling = "boot"))
summary(knn_2)
plot(knn_2)
# Fórmula k-óptimo: n^(4/(d+4))
# n es el número de datos de entrenamiento
# d es la dimensión de los datos
n=dim(datos_train_numeric)[1]
d=ncol(datos_train_numeric)
k_optimo = as.integer(n^(4/(d+4)))
k_optimo
rango=1:(k_optimo+10)
modelos=c()
f1_modelos=c()
for (i in rango){
model_knn=knn.cv(scale(datos_train_numeric),cl=as.factor(datos_train_limpio$price_categ1),k=i)
tabla=table(datos_train_limpio$price_categ1,model_knn)
# f1 casas caras
pred_means_caras=tabla[2,2]/(tabla[2,2]+tabla[1,2])
rec_means_caras=tabla[2,2]/(tabla[2,2]+tabla[2,1])
f1_caras=(2*pred_means_caras*rec_means_caras)/(pred_means_caras+rec_means_caras)
# f1 casas baratas
pred_means_baratas=tabla[1,1]/(tabla[1,1]+tabla[2,1])
rec_means_baratas=tabla[1,1]/(tabla[1,1]+tabla[1,2])
f1_baratas=(2*pred_means_baratas*rec_means_baratas)/(pred_means_baratas+rec_means_baratas)
f1_total = (f1_baratas + f1_caras)/2
f1_modelos=c(f1_modelos,f1_total)
}
f1_modelos
rango
pos_max <- which.max(f1_modelos)
rango[pos_max]
plot(f1_modelos)
k_maximo=50
rango=1:(k_maximo+10)
f1_modelos=c()
for (i in rango){
model_knn=knn.cv(scale(datos_train_numeric),cl=as.factor(datos_train_limpio$price_categ1),k=i)
tabla=table(datos_train_limpio$price_categ1,model_knn)
# f1 casas caras
pred_means_caras=tabla[2,2]/(tabla[2,2]+tabla[1,2])
rec_means_caras=tabla[2,2]/(tabla[2,2]+tabla[2,1])
f1_caras=(2*pred_means_caras*rec_means_caras)/(pred_means_caras+rec_means_caras)
# f1 casas baratas
pred_means_baratas=tabla[1,1]/(tabla[1,1]+tabla[2,1])
rec_means_baratas=tabla[1,1]/(tabla[1,1]+tabla[1,2])
f1_baratas=(2*pred_means_baratas*rec_means_baratas)/(pred_means_baratas+rec_means_baratas)
f1_total = (f1_baratas + f1_caras)/2
f1_modelos=c(f1_modelos,f1_total)
}
plot(f1_modelos)
which.max(f1_modelos)
f1_modelos
seed(1234)
set.seed(1234)
k_maximo=50
rango=1:(k_maximo+10)
f1_modelos=c()
for (i in rango){
model_knn=knn.cv(scale(datos_train_numeric),cl=as.factor(datos_train_limpio$price_categ1),k=i)
tabla=table(datos_train_limpio$price_categ1,model_knn)
# f1 casas caras
pred_means_caras=tabla[2,2]/(tabla[2,2]+tabla[1,2])
rec_means_caras=tabla[2,2]/(tabla[2,2]+tabla[2,1])
f1_caras=(2*pred_means_caras*rec_means_caras)/(pred_means_caras+rec_means_caras)
# f1 casas baratas
pred_means_baratas=tabla[1,1]/(tabla[1,1]+tabla[2,1])
rec_means_baratas=tabla[1,1]/(tabla[1,1]+tabla[1,2])
f1_baratas=(2*pred_means_baratas*rec_means_baratas)/(pred_means_baratas+rec_means_baratas)
f1_total = (f1_baratas + f1_caras)/2
f1_modelos=c(f1_modelos,f1_total)
}
plot(f1_modelos)
cat(c('Valor óptimo de k: ', which.max(f1_modelos)))
set.seed(1234)
k_maximo=50
rango=1:(k_maximo+10)
f1_modelos=c()
for (i in rango){
model_knn=knn.cv(scale(datos_train_numeric),cl=as.factor(datos_train_limpio$price_categ1),k=i)
tabla=table(datos_train_limpio$price_categ1,model_knn)
# f1 casas caras
pred_means_caras=tabla[2,2]/(tabla[2,2]+tabla[1,2])
rec_means_caras=tabla[2,2]/(tabla[2,2]+tabla[2,1])
f1_caras=(2*pred_means_caras*rec_means_caras)/(pred_means_caras+rec_means_caras)
# f1 casas baratas
pred_means_baratas=tabla[1,1]/(tabla[1,1]+tabla[2,1])
rec_means_baratas=tabla[1,1]/(tabla[1,1]+tabla[1,2])
f1_baratas=(2*pred_means_baratas*rec_means_baratas)/(pred_means_baratas+rec_means_baratas)
f1_total = (f1_baratas + f1_caras)/2
f1_modelos=c(f1_modelos,f1_total)
}
plot(f1_modelos)
cat(c('Valor óptimo de k: ', which.max(f1_modelos)))
cat(c('Valor óptimo de k: ', which.max(f1_modelos)))
knn_2 <- tune.knn(x=scale(datos_train_numeric),
y=as.factor(datos_train_limpio$price_categ1), k = 1:30,
tunecontrol = tune.control(sampling = "boot"))
# summary(knn_2)
plot(knn_2)
View(knn_2)
View(knn_1)
suppressWarnings(suppressMessages(library(kknn)))
knn_1 <- train.kknn(price_categ1 ~ ., data = datos_train_limpio, kmax = 30)
knn_1
set.seed(1234)
suppressWarnings(suppressMessages(library(kknn)))
knn_1 <- train.kknn(price_categ1 ~ ., data = datos_train_limpio, kmax = 30)
knn_1
set.seed(1234)
knn_2 <- tune.knn(x=scale(datos_train_numeric),
y=as.factor(datos_train_limpio$price_categ1), k = 1:30,
tunecontrol = tune.control(sampling = "boot"))
summary(knn_2)
plot(knn_2)
model_knn=knn.cv(scale(datos_train_numeric),cl=as.factor(datos_train_limpio$price_categ1),k=17)
center_lon = median(datos_train_limpio$long,na.rm = TRUE)
center_lat = median(datos_train_limpio$lat,na.rm = TRUE)
factpal1 <- colorFactor(c("green","red"),
model_knn)
leaflet(datos_train_limpio) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~long, lat = ~lat,
color = ~factpal1(model_knn))  %>%
# controls
setView(lng=center_lon, lat=center_lat,zoom = 12) %>%
addLegend("bottomright", pal = factpal1 , values = ~model_knn,
title = "Precio (en miles de $)",
opacity = 1)
tabla_knn=table(datos_train_limpio$price_categ1,model_knn)
tabla_knn
#caras
pred_means_caras_knn=tabla_knn[2,2]/(tabla_knn[2,2]+tabla_knn[1,2])
rec_means_knn=tabla_knn[2,2]/(tabla_knn[2,2]+tabla_knn[2,1])
F_caras_knn_train=(2*pred_means_caras_knn*rec_means_knn)/(pred_means_caras_knn+rec_means_knn)
cat(c('F1 caras: ', F_caras_knn_train), '\n')
#baratas
pred_means_baratas_knn=tabla_knn[1,1]/(tabla_knn[1,1]+tabla_knn[2,1])
rec_means_baratas_knn=tabla_knn[1,1]/(tabla_knn[1,1]+tabla_knn[1,2])
F_baratas_knn_train=(2*pred_means_baratas_knn*rec_means_baratas_knn)/(pred_means_baratas_knn+rec_means_baratas_knn)
cat(c('F1 baratas: ', F_baratas_knn_train), '\n')
#Media de la F-MEDIDA para KNN
F_knn_train= (F_caras_knn_train+F_baratas_knn_train)/2
cat(c('F1 global: ', F_knn_train), '\n')
accuracy_knn_train= (tabla_knn[1,1]+tabla_knn[2,2]) / (tabla_knn[1,1]+tabla_knn[1,2]+tabla_knn[2,1]+tabla_knn[2,2])
cat(c('Accuracy: ', accuracy_knn_train), '\n')
model_knn_test=knn(scale(datos_train_numeric),scale(datos_test_numeric),cl=datos_train_limpio$price_categ1,k=17)
tabla_knn_test=table(datos_train_limpio$price_categ1,model_knn_test)
model_knn_test=knn(scale(datos_train_numeric),scale(datos_test_numeric),cl=datos_train_limpio$price_categ1,k=17)
tabla_knn_test=table(datos_test_limpio$price_categ1, model_knn_test)
model_knn_test=knn(scale(datos_train_numeric),scale(datos_test_numeric),cl=datos_train_limpio$price_categ1,k=17)
tabla_knn_test=table(datos_test_limpio$price_categ1, model_knn_test)
tabla_knn_test
#caras
pred_means_caras_knn_test=tabla_knn_test[2,2]/(tabla_knn_test[2,2]+tabla_knn_test[1,2])
rec_means_knn_test=tabla_knn_test[2,2]/(tabla_knn_test[2,2]+tabla_knn_test[2,1])
F_caras_knn_test=(2*pred_means_caras_knn_test*rec_means_knn_test)/(pred_means_caras_knn_test+rec_means_knn_test)
cat(c('F1 caras: ', F_caras_knn_test), '\n')
#baratas
pred_means_baratas_knn_test=tabla_knn_test[1,1]/(tabla_knn_test[1,1]+tabla_knn_test[2,1])
rec_means_baratas_knn_test=tabla_knn_test[1,1]/(tabla_knn_test[1,1]+tabla_knn_test[1,2])
F_baratas_knn_test=(2*pred_means_baratas_knn_test*rec_means_baratas_knn_test)/(pred_means_baratas_knn_test+rec_means_baratas_knn_test)
cat(c('F1 baratas: ', F_baratas_knn_test), '\n')
#Media de la F-MEDIDA para KNN
F_knn_test = (F_caras_knn_test+F_baratas_knn_test)/2
cat(c('F1 global: ', F_knn_test), '\n')
accuracy_knn_test= (tabla_knn_test[1,1]+tabla_knn_test[2,2]) / (tabla_knn_test[1,1]+tabla_knn_test[1,2]+tabla_knn_test[2,1]+tabla_knn_test[2,2])
cat(c('Accuracy: ', accuracy_knn_test), '\n')
datos_validacion_numeric
model_knn_validacion=knn(scale(datos_train_numeric),scale(datos_validacion_numeric),cl=datos_train_limpio$price_categ1,k=17)
datos_train_numeric
model_knn_validacion=knn(scale(datos_train_numeric),scale(datos_validacion_numeric),cl=datos_train_limpio$price_categ1,k=17)
tabla_knn_validacion=table(datos_validacion_limpio$price_categ1, model_knn_validacion)
tabla_knn_validacion
#caras
pred_means_caras_knn_validacion=tabla_knn_validacion[2,2]/(tabla_knn_validacion[2,2]+tabla_knn_validacion[1,2])
rec_means_knn_validacion=tabla_knn_validacion[2,2]/(tabla_knn_validacion[2,2]+tabla_knn_validacion[2,1])
F_caras_knn_validacion=(2*pred_means_caras_knn_validacion*rec_means_knn_validacion)/(pred_means_caras_knn_validacion+rec_means_knn_validacion)
cat(c('F1 caras: ', F_caras_knn_validacion), '\n')
#baratas
pred_means_baratas_knn_validacion=tabla_knn_validacion[1,1]/(tabla_knn_validacion[1,1]+tabla_knn_validacion[2,1])
rec_means_baratas_knn_validacion=tabla_knn_validacion[1,1]/(tabla_knn_validacion[1,1]+tabla_knn_validacion[1,2])
F_baratas_knn_validacion=(2*pred_means_baratas_knn_validacion*rec_means_baratas_knn_validacion)/(pred_means_baratas_knn_validacion+rec_means_baratas_knn_validacion)
cat(c('F1 baratas: ', F_baratas_knn_validacion), '\n')
#Media de la F-MEDIDA para KNN
F_knn_validacion = (F_caras_knn_validacion+F_baratas_knn_validacion)/2
cat(c('F1 global: ', F_knn_validacion), '\n')
accuracy_knn_validacion= (tabla_knn_validacion[1,1]+tabla_knn_validacion[2,2]) / (tabla_knn_validacion[1,1]+tabla_knn_validacion[1,2]+tabla_knn_validacion[2,1]+tabla_knn_validacion[2,2])
cat(c('Accuracy: ', accuracy_knn_validacion), '\n')
